btl_debPrint2( "\n>>> [btl_StdCommdandTbl]" );

//Std_CommandTable <- {};
//浅いコピーにうんざりしたのでこうした
function Battle_Std::GetStdCommandTable()
{

local t = {};

//Def_SCT_Commonフラグがあるコマンドは強制的にコマンドに登録される

// デフォルトコマンド間隔猶予　：　@D,8@
// デフォルトコマンド成功時間　：　1F　Skill〜で始まる場合"lastdelay"がつくので@L,2@がある状態
//0v2v02A  【0:X】→【v:6】→【2:10】→【v:6】→【0:10】→【2:6】→【A】
//0v2v02A  【0:X】→【v:6】→【2:10】→【v:6】→【0:10】→【2:6】→【A】
//ニュートラル前後に違うコマンド〜は1Fだけハイっても検地されないようだ

//CmdBeforeStdFunc : コマンドが入った直後の処理（出るかどうかチェックする前）
//CmdAfterStdFunc : チェックが通ったコマンド成立時の処理。コマンドを受け付けただけで発生するとは限らない。
//「CmdCheck + CmdBeforeStdFunc + CmdAfterStdFunc」か「Check」の二択。Checkはあんまり使わない。

// airskill : ジャンプ移行中に出しても離陸後発動するコマンド

if( Def_Dbg_DebugButtonMode )
{
	t.DebugPause <-
	{
		cmdtmplflags = Def_SCT_Common,
		num = def_CN_Debug00, name = "Cmd_DebugPause", command = ["0+E"], posstatus = _PosState_Always,
		CmdCheck = { SkillType = "AddCommand", PosState = "Always" },
		function CmdAfterStdFunc()
		{
			_dm("【連絡】デバッグボタンが押されました");
			return 1;
		},
		UpdateTable = { name = "Mv_DebugPause", }
	}

	t.DebugButton_4 <-
	{
		cmdtmplflags = Def_SCT_Common,
		num = def_CN_Debug01, name = "Cmd_DebugButton_4", command = ["4+E"],
		CmdCheck = { SkillType = "ExSpecial" },
		function CmdAfterStdFunc()
		{
			_dm("【連絡】デバッグボタンが押されました");
			return 1;
		},
		UpdateTable = { name = "Mv_DebugButton_4", }
	}
	t.DebugButton_6 <-
	{
		cmdtmplflags = Def_SCT_Common,
		num = def_CN_Debug02, name = "Cmd_DebugButton_6", command = ["6+E"],
		CmdCheck = { SkillType = "ExSpecial" },
		function CmdAfterStdFunc()
		{
			_dm("【連絡】デバッグボタンが押されました");
			return 1;
		},
		UpdateTable = { name = "Mv_DebugButton_6", }
	}

	t.DebugButton_2 <-
	{
		cmdtmplflags = Def_SCT_Common,
		num = def_CN_Debug03, name = "Cmd_DebugButton_2", command = ["2+E"],
		CmdCheck = { SkillType = "ExSpecial" },
		function CmdAfterStdFunc()
		{
			_dm("【連絡】デバッグボタンが押されました");
			return 1;
		},
		UpdateTable = { name = "Mv_DebugButton_2", }
	}
}

//チェインシフト
t.Convert <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Convert, name = "Cmd_Convert", command = ["DD@D,17@"],//@D,60@
	flags = [ "lastdelay" ],
	posstatus = _PosState_Always,
	CmdBeforeStdFunc = function()
	{
		//GRDで引き分け以上じゃないとダメ　光ってる時
		if( BMvEff.GRD_GetJudgeResult()<=0 ) return 0;
		
		//×EXキャンセル　×チェインシフト			
		if(	Battle_Std.CheckExSpecialCancel() == 0 &&
			BCMDTbl.CheckCancel( _SkillType_ChainShift ) == 0 ) return 0;
		//チェインシフトのみ可な時はコンボ中じゃないとダメ（相手がやられ中のみ）
		//EXキャンセル可は空振りキャンセルも可能なのだよ
		//でもシールドMv中は空振りキャンセル可にしておく（後ろ入れながらD2回）
	
		//×EXキャンセル　○チェインシフト
		if(	Battle_Std.CheckExSpecialCancel() == 0 && BCMDTbl.CheckCancel( _SkillType_ChainShift ) )
		{
			// EXキャンセルはできないが、CS可のチェックがあって...
			if( Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_ChainShiftOK ) )
			{
				// 空振りCS可能フラグがあるなら基本いつでもOK
				// _dpn("空振りCS可能");
			}
			else if( Battle_Std.MoveCodeEx.CheckFlag( 5, def_MC5_ChainShiftOK_NoShield ) )
			{
				// 空振りCS可能フラグがある（シールドされるとNG）
				// _dpn("空振りCS可能(シールドはNG)");
				
				// だけどシールドされるとキャンセル不可にしたい技もある
				// def_MC1_Shield_CanselNGのフラグだけを見るのが自然だが、影響範囲がかなり広いので専用フラグを増やして対応
				if( Battle_Std.MoveCode.CheckFlag( def_MC_Shielded ) )
				{
					// _dpn("空振りCS可能だがシールドされるとキャンセル不能");
					return 0;
				}
			}
			else if( Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_GuardChainShiftOK ) && ( BMvTbl.GetMvHitStatus().Type & _HitType_Hit ) )
			{
				// def_MC7_StdAssultLimitAirAtk2 : 地上アサルトの制限を受けている攻撃（技後再行動できる技も含む）
				if( Def_Sys_AssultAirAtkCanGuardChainShift && Battle_Std.MoveCodeEx.CheckFlag( 7, def_MC7_StdAssultLimitAirAtk2 ) )
				{
					// アサルトジャンプ攻撃をガードされてもCS可能にする処理を少し厳密にした
					// 元の判定データ側で通常Cか必殺Cが設定されていないときはキャンセルできないようにしている
					// アサルトガード時にフラグが付与されるので、それで変にキャンセルされないようにしている
					
					// _dpn("アサルトジャンプ攻撃後のガード時CS可能"); // ツール側の設定を見る
					local normal = BCMDTbl.GetCancelFlagData( 0 );
					local special = BCMDTbl.GetCancelFlagData( 1 );
					//0:なし
					//1:HIT
					//2:いつでも
					//3:DAMAGE時
					
					if( normal == 1 || normal == 2 || special == 1 || special == 2 )
					{
						// _dpn("HIT時はOK");
					}
					else if( normal == 3 || special == 3 )
					{
						if( !(BMvTbl.GetMvHitStatus().Type & _HitType_Damage) )
						{
							// _dpn("Damage時のみなので不可");
							return 0;
						}
					}
					else
					{
						// _dpn("そもそも判定データ側にキャンセルフラグがない");
						return 0;
					}
					
					if( Battle_Std.MoveCode.CheckFlag( def_MC_Shielded ) )
					{
						// _dpn("アサルトJ攻撃をシールドとられてるので不可");
						return 0;
					}
				}
				else
				{
					// アサルトジャンプ攻撃ではない場合はフラグ＋ヒット情報があれば常に成功
					// _dpn("ガード時CS可能");
				}
			}
			else //それ以外のMvの時
			{
				//やられ中のみ可
				if( !Battle_Std.CheckEnemyisDamage() ) return 0;
				
				//SS技は空振りCSで補正がすごいことになる可能性があるので絶対に除外する
				if( Battle_Std.MoveCodeEx.CheckFlag( 2, def_MC2_SSRelayAtk ) )
				{
					if( !(BMvTbl.GetMvHitStatus().Type & _HitType_Hit) )
					{
						//_dpn("SS技はヒットしてないとダメ");
						return 0;
					}						
				}
			}
		}
		
		// なぜここに書くかというと、アサルトでかかりの地上はCS可能にしたくて
		// アサルト移動中の空中時はCS不可能にしたいため
		if( Battle_Std.IsMatchMvNameArray( ["Mv_Assault_Std","Mv_Assault_Air"] ) )
		{
			// 飛び上がったらアサルトカウンタ増えるので、ここでチェック
			if( BMvTbl.AddAirCount( def_AC_Assault, 0 ) >= 1 ) return 0;
		}
		
		return 1;
	}	
	CmdCheck = { PosState="Always", SkillType = "AddCommand" },
	CmdAfterStdFunc = function()
	{
		//行動可能から出した or コンセント or シールド から出したならノーキャンチェインシフト
		local move = ( BCMDTbl.CheckCancel( _SkillType_None ) !=0 );
		if( move || BCMDTbl.CheckMoveName( ["Mv_Barrier_Cro","Mv_Barrier_Std","Mv_Barrier_Air", "Mv_ConvertCharge","Mv_ForwardShift"] ) )
		{
			//ノーキャンセルチェインシフトのようだ
			//print("\n★　ノーキャンだよ")
			BMvTbl.SetPP(def_PP_ChainShiftStatus,0);
		}
		else
		{
			//print("\n★　×")
			BMvTbl.SetPP(def_PP_ChainShiftStatus,1);
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Convert", }
}

//コンセントレーション
t.ConvertCharge <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_ConvertCharge, name = "Cmd_ConvertCharge", command = ["0+D","@B,D,5@"], //なんかもうこれでいいんじゃないか？
//	num = 1907, name = "Cmd_ConvertCharge", command = ["@B,D,22@"], //Dを押し続ける
//	num = 1907, name = "Cmd_ConvertCharge", command = ["0+D@B,D,5@"], //ニュートラル＋Ｄ押しっぱなしのみに
	CmdCheck = { SkillType = "None" },
	CmdBeforeStdFunc = function()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if ( BMvTbl.CheckStickHold( (1<<0) ) == 0 ) return 0; //ニュートラルじゃないと出せない
		
		return 1;
	}
	UpdateTable = { name = "Mv_ConvertCharge", }
}

//ヴェールオフ
t.Liberate <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Liberate, name = "Cmd_Liberate", command = ["A+B+C"], usegauge = 10000,
	flags = [ "lastdelay" ],		
	CmdCheck = { Cost = { ComboGauge = 10000 }, SkillType = "NoneDouji", MvCheck={ Fail="Mv_Liberate"},
	},
	CmdBeforeStdFunc = function()
	{
		local gauge_status = BMvEff.Liberate_Get();
		if( gauge_status == _SpGaugeMode_Liberate || gauge_status == _SpGaugeMode_OverLiberate ) return 0; //ゲージ通常状態でしか出せない
		//ゲージはcostが10000あるから多分大丈夫なのではないか？
		//if ( BMvEff.Liberate_OK() != 1 ) return 0; //リベレート中は出せない
		
		return 1;
	}
	CmdAfterStdFunc = function()
	{
		local gauge = BCMDTbl.GetComboGauge();
		if( gauge < 20000 )
		{
			BMvTbl.SetPP(def_PP_VeilOffGaugeType,0); //100%開放
		}
		else
		{
			BMvTbl.SetPP(def_PP_VeilOffGaugeType,1); //200%開放
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Liberate", }
}

//クロスキャストヴェールオフ
t.ComboLiberate <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_ComboBlast, name = "Cmd_ComboLiberate", command = ["A+B+C"], usegauge = 10000,
	flags = [ "lastdelay" ], posstatus = _PosState_Always,	
	CmdCheck = { Cost = { ComboGauge = 10000 }, SkillType = "CVO", MvCheck={ Fail="Mv_ComboLiberate"},
	PosState = "Always",
	// ExSpecialDoujiだと結構バグありそうだし、コンボ中なので同時押しの猶予なくてもよくない？
	},
	CmdBeforeStdFunc = function()
	{
		local gauge_status = BMvEff.Liberate_Get();
		if( gauge_status == _SpGaugeMode_Liberate || gauge_status == _SpGaugeMode_OverLiberate ) return 0; //ゲージ通常状態でしか出せない
		//ゲージはcostが10000あるから多分大丈夫なのではないか？
		//if ( BMvEff.Liberate_OK() != 1 ) return 0; //リベレート中は出せない
		// if( BMvEff.GRD_GetBreak( 0 ) != 100 ) return 0; // チェインシフト中しか出せない
		if( BMvEff.GRD_GetJudgeResult() <= 0 ) return 0; // VORPAL中のみ
		// if( BCMDTbl.CheckCancel( _SkillType_None ) != 0 ) return 0; // キャンセルでしか出せない]
		// 相手がやられ中のみ出せる
		
		//行動可能の時は出せない
		local movable = BCMDTbl.CheckCancel( _SkillType_None );
		if( movable ) return 0;

		//相手がバウンド中じゃないと出せない…ではなく、＋してヒット情報を持っていても可に
		local hs = BMvTbl.GetMvHitStatus();
		if( ( hs.Type & _HitType_Hit ) == 0 && Battle_Std.CheckEnemyisBound() == false ) return 0;
		
		// キャンセルで出した時だけ成功にする
		local cmd_info = BCMDTbl.GetCmdInfo();
		// local mvs = BMvTbl.GetMvStatus();
		
		// 行動可能状態から、ズラし押しで出した
		if( !movable && cmd_info.GetCancel( _SkillType_None ) && cmd_info.GetFrame() <= 3 )
		{
			// 相手やられ中にA+B+Cを出すと、VOを出そうとしてJCとかが出て1F目キャンセルで出てしまうのを防ぐ
			return 0;
		}
		// 行動不能からズラし押しで出すのは成功にする
		// B→A+B+Cで一瞬Cが出てしまってもOKとするため
		
		// EX必殺以上の状態だと失敗にする
		// def_MC_EXAction
		// def_MC_SPAction
		if( Battle_Std.MoveCode.CheckFlag( def_MC_EXAction|def_MC_SPAction ) )
		{
			// SS技だけは除外
			if( !Battle_Std.MoveCodeEx.CheckFlag( 2, def_MC2_SSRelayAtk ) )
			{
				return 0;
			}
		}
		
		// そうじゃなくても前のコマンド入力から2F以内で、前の行動がEX・SP必殺技っぽかったらダメにする
		local info0 = BCMDTbl.GetCmdInfoEx(0);
		if( info0.GetFrame() <= 3 ) // ちょっと余裕をもって
		{
			if( BMvTbl.ChangeMv_GetMoveCodeEx(0)&(def_MC_EXAction|def_MC_SPAction) )
			{
				print("\n 前の行動がダメっぽい");
				return 0;
			}
		}
		
		return 1;
	}
	CmdAfterStdFunc = function()
	{
		local gauge = BCMDTbl.GetComboGauge();
		if( gauge < 20000 )
		{
			BMvTbl.SetPP(def_PP_VeilOffGaugeType,0); //100%開放
		}
		else
		{
			BMvTbl.SetPP(def_PP_VeilOffGaugeType,1); //200%開放
		}
		return 1;
	}
	UpdateTable = { name = "Mv_ComboLiberate", }
}

t.Skill_DyingIWEAtk <-
{ //-------------------------------
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Skill_DyingIWE, name = "Cmd_Skill_DyingIWEAtk", command = ["A+B+C+D"], usegauge = 20000,
	flags = [ "lastdelay" ], posstatus = _PosState_Always,
	CmdCheck = { Cost = { ComboGauge = "OverLiberate" }, SkillType = "SpSpecial", MvCheck={ Fail="Mv_DyingIWEAtk"},
	},
	CmdBeforeStdFunc = function()
	{
		// MEMO:IWEはステアエンダーから繋がらないキャラもいて怪しいので一旦入れないことにする
		// if( !Battle_Std.CheckSSRelayAtkExCancel( 1 ) ) return 0; // ステアエンダー後のみ有効なコマンドチェック

		local mvs = BMvTbl.GetMvStatus();
		if( mvs.flags & _MvStFlag_DangerHPDef )
		{
			// 瀕死の時だけ出せる
		}
		else
		{
			// _dp("\n 瀕死じゃない");
			return 0;
		}

		// 基本的に地上じゃないと出せないけど、ヴェールオフ中などは同時押しの猶予として空中でも出せるようにする
		if( BCMDTbl.CheckPosState( _PosState_Ground ) )
		{
			// 地上
		}
		else
		{
			// 空中
			if( Battle_Std.IsMatchMvNameArray( ["Mv_Liberate","Mv_ComboLiberate","Mv_Skill_SSRelayAtk"] ) )
			{
				local info0 = BCMDTbl.GetCmdInfoEx(0);
				if( info0.GetFrame() > 2 ) return 0; // 同時押しの猶予F内かどうか
				
				// CVOは空中でも出せるので地上スタートっぽくないときはNGにする
				if( BMvTbl.GetMvName() == "Mv_ComboLiberate" )
				{
					if( !Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_GenFlag ) ) // Mv固有フラグ
					{
						return 0;
					}
				}
				
				// CVO以外はもともと地上でしか出せないので高さチェックは不要
 
				// 成功
			}
			else
			{
				return 0;
			}
		}
		return 1;
	}
	CmdAfterStdFunc = function()
	{
		// print("\n CmdAfterStdFunc()");
		// print(" -> 成功");
		return 1;
	}
	UpdateTable = { name = "Mv_DyingIWEAtk", }
}

t.Throw_F <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Throw_F, name = "Cmd_Throw_F", command = ["A+D"], //↓のだと屈グラでスロウリジェクト発生しないのでそれもダメ
//	num = def_CN_Throw_F, name = "Cmd_Throw_F", command = ["A+D"], //投げ抜け仕込み関係用にA+Dにしちゃうお→屈ガードしつつA+Dがクソなので×
	flags = [ "lastdelay" ], posstatus = _PosState_Always, // これはつけるけど地上じゃなかったら弾くよ
	CmdCheck =
	{
		SkillType = "SpecialThrow", MvCheck={ Fail="Mv_Throw_F"},
	},
	CmdBeforeStdFunc = function()
	{
		//※空中でも入ってくる。投げコマンドを入れたMvなのを記憶するため。
		Battle_Std.MoveCodeEx.AddFlag( 2, def_MC2_InputThrowCmd );
		if( !BCMDTbl.CheckPosState( _PosState_Ground ) ) return 0; // 地上ではないので弾く
		
		// 以降は地上時
		Battle_Std.GS_DelFlag( def_PP_GS_SlideDashThrow ); // スライド投げかどうかを初期化
		
		//コマンドがきたら投げ抜け管理を生成する
		Battle_Std.CreateTechObject(0); //投げ抜け猶予０から開始
		
		local is_reversal_command = BCMDTbl.IsDirectCommand();
		
		// ダミーに3を記録、リバーサル行動を投げ　→　投げ
		// ダミーに3+Cを記録、リバーサル行動を投げ　→　3Cになって欲しい…が無理そう
		
		// if( BMvTbl.IsCpu()==0 || !is_reversal_command ) // プレイヤーの時、もしくはリバーサル行動じゃないとき（しゃがみ時にリバーサル行動で投げが出ないのは不便なので）
		// このチェックだと、3+C＋リバーサル投げのときは投げになってしまう
		// けど、リバーサル行動が出ないことのほうが違和感があるのでこっちに修正
		
		if( !is_reversal_command ) // これだけだと、リバーサル行動投げ+3Cの同時再生のとき、3Cが出ない
		{
			if( Def_Sys_ThrowF_EnableStick1 )
			{
				local check3graps = BMvTbl.CheckCommand( ["Cmd_Atk_Cro3B","Cmd_Atk_Cro3C","Cmd_Atk_Std3B","Cmd_Atk_Std3C"] );
				local stick3 = BMvTbl.CheckStickHold( (1<<3) );

				// 3方向だけど特殊技を入れていないとき＝投げを成功させたい
				// 3方向で特殊技を入れているときは、3Cグラなど優先のため失敗にする必要あり
				local no3atkgraps = (!check3graps && stick3);

				// 上記に加えて、3D>2 or 7 or 8 or 9と入れた場合、3Dに投げ抜けを仕込めるのもよくないのでそれは防ぐ
				// 3Dが始まったらグラは仕込めなくする＝A+Dを検知したときレバーが2や3でも投げに行くようになる
				// 3D以外も6Dや4Dで同じ現象は起きるが、防御テクとして結構強そうなので、今回は3Dだけ修正した
				local nograpmv = ( BMvTbl.GetMvName()=="Mv_ForwardShift" )? 1 : 0; // グラップを仕込めないMV

				//if( !(BMvTbl.CheckStickHold( (1<<4) | (1<<6) | (1<<0) | (1<<1) | (1<<3) ) ) ) // これだと3グラができない
				if( !(BMvTbl.CheckStickHold( (1<<4) | (1<<6) | (1<<0) | (1<<1) ) || no3atkgraps ) && !nograpmv )
				{
					// 2ADといれてすぐに1にすると投げが漏れるのは嫌なので一定時間塞ぐ
					// 一定時間投げ成功しないようにする
					BMvTbl.SetCommandFailTime( { command=def_CN_Throw_F, time=3 } );
					
					// よくあるガードリバーサルだけ上記チェックを延長する
					if( Battle_Std.CheckPlayerisGuard() )
					{
						BMvEff.CreateObject( { mvname="Mv_Null_GuardReversalThrowBouhatsuChecker" } );
					}

					return 0; //2と3グラ以外は禁止
				}
			}
			else
			{
				//レバー状態が4or0or6じゃないと出せないようにする（↑の投げ抜け猶予は受け付けつつコマンドは失敗）
				if( !(BMvTbl.CheckStickHold( (1<<4) | (1<<6) | (1<<0) ) ) ) return 0; //4or0or6じゃなかったら失敗
			}
		}
		
		if( BCMDTbl.CheckCancel( _SkillType_None ) )
		{
		
			// ズラし押しダッシュかどうか調べる
			// _dp( "\n 前:"+BMvTbl.ChangeMv_GetMvName()+" 今:"+BMvTbl.GetMvName()+" mvc:"+BMvTbl.GetMvStatus().MvCount );
			if( BMvTbl.GetMvName() == "Mv_DashWait_F" && BMvTbl.GetMvStatus().MvCount<=2 && BMvTbl.GetCmdNumber()==def_CN_Dash_F_Douji )
			{
				// _dp("\n ★★多分ズラしおし");
				Battle_Std.GS_AddFlag( def_PP_GS_SlideDashThrow ); // スライド投げ
			}
		
			return 1; // 行動可能時に出したので成功
		}
		
		//行動可能ではないとき
		//181214 立ちAAからも出せるようにした
		// 1.キャンセルで出した時＝立ちAとしゃがみAのヒットからのみ出せる+立ちAAのヒットも
		// 2.行動可能から空キャンで出した時＝doujiが許せば何でも出せる
		// 3.キャンセルで出した時＋さらにA系統空キャンで出した時＝前の行動が立ちAとしゃがみAからのみ出せる+立ちAAも
		
		// キャンセルで出した
		local cmd_info = BCMDTbl.GetCmdInfo();
		local hs = BMvTbl.GetMvHitStatus();
		local cl_std = BCMDTbl.CheckComboLimit( DEF_BS_CL_STDA ); //255なら立Aから出した
		local cl_cro = BCMDTbl.CheckComboLimit( DEF_BS_CL_CROA ); //255なら屈Aから出した
		local cl_stdA_A = BCMDTbl.CheckComboLimit( DEF_BS_CL_ATKA_A ); //255なら立AAから出した
		
		//※コンボリミット仕様メモ
		// 使うと0〜999のスロットが埋まる
		// すでにチェーンで使ってる技 = 1
		// 使ってない技 = 0
		// 前回と同じ技 = 255
		
		if( hs.Type & _HitType_Hit ) // ヒット
		{
			// ヒット情報を持っている＝ズラし押しではなくビタで出そうとした
			// つまり立Aと屈A以外は失敗+立ちAAも
			if( cl_std!=255 && cl_cro!=255 && cl_stdA_A!=255 ) return 0;

			//もはや二重にチェックする意味が無いのでは、とも思うが…
			// このチェックがないと、A>(コンボリミットのない技)>投げ が出せてしまう
			local mvname = BMvTbl.GetMvName();
			if( cl_std == 255 && mvname != "Mv_Atk_StdA" ) return 0;
			if( cl_cro == 255 && mvname != "Mv_Atk_CroA" ) return 0;
			if( cl_stdA_A == 255 && mvname != "Mv_Atk_A_A" ) return 0;
		}
		else if( !cmd_info.GetCancel( _SkillType_None ) ) // 空振り
		{
			// ヒット情報を持っていなくて、直前の行動が行動不能
			// ズラし押しで出そうとしている
			if( cmd_info.GetFrame() > 2 ) return 0;

			// ズラし押しで出せる行動も制限をかける
			// これをやらないと B→AズラしDとかで、Aからの攻撃じゃないのに出せてしまうよ
			local last_mv = BMvTbl.ChangeMv_GetMvName();
			if( last_mv != "Mv_Atk_StdA" && last_mv != "Mv_Atk_CroA" && last_mv != "Mv_Atk_Std6A" && last_mv !="Mv_Atk_A_A" )
			{
				return 0;
			}
			else
			{
				local mvs_bf = BMvTbl.GetMvStatusBF();
				if( mvs_bf.MvCount > 2 )
				{
					return 0; // ChangeMv_GetMvNameで比較する場合はこっちを見ないとダメっぽい
				}
			}
		}
		else
		{
			// print("\n 行動可能から");
			// 攻撃の硬直とか、行動可能からのズラし押しだとここに来るはず
			
			// ヒット情報を持っていなくて、直前の行動が行動不能
			// ズラし押しで出そうとしている
			// print("\n cmd_info.GetFrame2():"+cmd_info.GetFrame() );
			if( cmd_info.GetFrame() > 2 ) return 0;

			// ズラし押しで出せる行動も制限をかける
			// これをやらないと B→AズラしDとかで、Aからの攻撃じゃないのに出せてしまうよ
			// local now_mv = BMvTbl.GetMvName();
			// if( now_mv != "Mv_Atk_StdA" && now_mv != "Mv_Atk_CroA" && now_mv != "Mv_Atk_Std6A" )
			// {
				// return 0;
			// }			
		}
		
		return 1;
	},
	UpdateTable = { name = "Mv_Throw_F", }
	CmdAfterStdFunc = function()
	{
		//レバーが逆向き投げかどうか記憶する
		//自分→　←相手　４方向　・・・　逆投げ
		//←自分　←相手　６方向　・・・　逆投げ
		//…なので相手の方向を向いているかのチェックが必要
		Battle_Std.SetTechReverse( 1 );//レバー逆入れならdef_PP_TechReverseに記憶

		return 1;
	}
}

t.Dash_F <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Dash_F, name = "Cmd_Dash_F", command = ["0606"],
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "None",
	MvCheck = { Fail = ["Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F"] },
	DashLimit = 1 },
	function CmdAfterStdFunc()
	{
		// BMvEff.CreateObject( { mvname="Mv_Null_CheckDashStickHold" } );
		return 1;
	}	
	UpdateTable = { name = "Mv_DashWait_F", }
}

t.Dash_F_Douji <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Dash_F_Douji, name = "Cmd_Dash_F_Douji", command = ["6+A+B","A+B"],
	flags = [ "lastdelay" ],
	function CmdBeforeStdFunc()
	{
		// 方向キー前じゃないと失敗
		// ここでチェックすることで、A+B>6みたいな入力でもダッシュ可能になる（半分バグ利用）
		local cmd_pos = BCMDTbl.GetSuccessButtonPos();
		if( cmd_pos == 1 )
		{
			if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
			{
				if( !BMvTbl.CheckCommandString( "6" ) )
				{
					// _dpn("前操作ではないので失敗");
					return 0;
				}
			}
			else
			{
				return 0;
			}
		}
		
		BMvTbl.SetPP(def_PP_CmdStatus, BMvTbl.GetPP(def_PP_CmdStatus)|def_PP_CS_InputDoujiDash_F ); //同時押しダッシュを出そうとしたのを記憶
		
		return 1;
	}
	CmdCheck = { SkillType = "NoneDash",
	MvCheck = { Fail = ["Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F"] },
	DashLimit = 1 },
	function CmdAfterStdFunc()
	{
		// 同時押しコマンドからはダッシュBを出ないようにする
		// 0606ABと入れたとき、優先度が「6AB＞66B＞66」なので、6ABダッシュと検知されてしまう
		// そのため、6ABコマンドがあったとしても、66ダッシュを入れているようであれば、ボタンのチェックは無効化する
		// if( !(BMvTbl.CheckCommand( [def_CN_Dash_F] ) && BMvTbl.CheckCommand( [def_CN_Atk_DashAdd] )) ) // こうしてもいいが、特に意味もなさそうなのでシンプルに記述
		if( !BMvTbl.CheckCommand( [def_CN_Dash_F] ) ) // 66ダッシュではない
		{
			BMvTbl.SetPP(def_PP_CmdStatus, BMvTbl.GetPP(def_PP_CmdStatus)|def_PP_CS_DoujiDash_F ); //同時押しダッシュで出したのを記憶
			BMvEff.CreateObject( { mvname="Mv_DoujiDash_F_HoldCheckObject" } );
		}

		// BMvEff.CreateObject( { mvname="Mv_Null_CheckDashStickHold" } );
		return 1;
	}
	UpdateTable = { name = "Mv_DashWait_F", }
}

t.Dash_B <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Dash_B, name = "Cmd_Dash_B", command = ["0404"],
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "None", },
	UpdateTable = { name = "Mv_Dash_B", }
}

t.Dash_B_Douji <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Dash_B_Douji, name = "Cmd_Dash_B_Douji", command = ["4+A+B","A+B"],
	flags = [ "lastdelay" ],
	function CmdBeforeStdFunc()
	{
		// ABダッシュだと、ダッシュガードが前ステバクステになりやすいので色々チェック
		local cmd_pos = BCMDTbl.GetSuccessButtonPos();		
		if( cmd_pos == 1 )
		{
			if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
			{
				if( !BMvTbl.CheckCommandString( "4" ) )
				{
					// _dpn("後ろ操作ではないので失敗");
					return 0;
				}
			}
			else
			{
				return 0;
			}
		}
		
		// ボタンダッシュ操作の後っぽいので失敗
		if( Battle_Std.PP_CheckFlag(def_PP_CmdStatus,def_PP_CS_DoujiDash_F) ) 
		{
			_dpn("ボタンダッシュ操作後は出せない");
			return 0;
		}

		BMvTbl.SetPP(def_PP_CmdStatus, BMvTbl.GetPP(def_PP_CmdStatus)|def_PP_CS_InputDoujiDash_B ); //同時押しダッシュを出そうとしたのを記憶
		
		return 1;
	}
	CmdCheck = { SkillType = "NoneDash", },
	UpdateTable = { name = "Mv_Dash_B", }
}

t.Jump_F <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Jump_F, name = "Cmd_Jump_F", command = "9",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;
		
		return 1;
	},
	CmdCheck = { SkillType = "None", },
	UpdateTable = { name = "Mv_JumpWait_F", }
}

t.Jump_N <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Jump_N, name = "Cmd_Jump_N", command = "8",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;
		
		return 1;
	},
	CmdCheck = { SkillType = "None", },
	UpdateTable = { name = "Mv_JumpWait_N", }
}

t.Jump_B <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Jump_B, name = "Cmd_Jump_B", command = "7",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;
		
		return 1;
	},
	CmdCheck = { SkillType = "None", },
	UpdateTable = { name = "Mv_JumpWait_B", }
}

t.JumpCancel_F <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_JumpCancel_F, name = "Cmd_JumpCancel_F", command = "9",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // コンボ中はジャンプキャンセル１回のみ
		if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
		
		return 1;
	}
	CmdCheck = { SkillType = "NormalJump", HitStatus=Def_Rule_CmdHitStatus_JumpCancel },
	UpdateTable = { name = "Mv_JumpCanselWait_F", }
}

t.JumpCancel_N <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_JumpCancel_N, name = "Cmd_JumpCancel_N", command = "8",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // コンボ中はジャンプキャンセル１回のみ
		if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
		
		return 1;
	}
	CmdCheck = { SkillType = "NormalJump", HitStatus=Def_Rule_CmdHitStatus_JumpCancel },
	UpdateTable = { name = "Mv_JumpCanselWait_N", }
}

t.JumpCancel_B <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_JumpCancel_B, name = "Cmd_JumpCancel_B", command = "7",
//	flags = [ "roundstart" ],
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // コンボ中はジャンプキャンセル１回のみ
		if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
		
		return 1;
	}
	CmdCheck = { SkillType = "NormalJump", HitStatus=Def_Rule_CmdHitStatus_JumpCancel },
	UpdateTable = { name = "Mv_JumpCanselWait_B", }	
}

//アサルト
t.Assault_Std <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Assault_Std, name = "Cmd_Assault_Std", command = [ "6+D","@H,6D@" ],
	flags = [ "lastdelay" ],
	CmdBeforeStdFunc = function()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if( BMvTbl.AddAirCount( def_AC_Assault, 0 ) != 0 ) return 0; // アサルト回数チェック

		//暗転返しのときだけ6Dおしっぱで出せるようにする
		if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
		{
			//トレモのリバーサル設定で出せないことがあったのでCPU時は弾いてる
			local btn_pos = BCMDTbl.GetSuccessButtonPos();
			if( btn_pos == 1 )
			{
				if( Battle_Std.MoveCodeEx.CheckFlag( 2, def_MC2_EnemyAntenStop ) )
				{
					_dpn("暗転されたときなので6Dホールドで出せる");
				}
				else
				{
					return 0;
				}
			}
		}
		
		return 1;
	},
	CmdCheck = { SkillType = "None", MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] }, },
	UpdateTable = { name = "Mv_Assault_Std", }
}

if( Def_Sys_EasierLaunchAirAssult )
{
	
t.Assault_Air <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Assault_Air, name = "Cmd_Assault_Air", command = [ ">+D","0606",">+A+B" ], // 出しやすく前要素のみでOK
	flags = [ "lastdelay", "airskill" ], posstatus = _PosState_Air,
	Check = function()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if( BMvTbl.AddAirCount( def_AC_Assault, 0 ) != 0 ) return 0; // アサルト回数チェック
		
		// 落下中は高度制限あり
		// のぼりのときだけ出しやすく高度制限なしにしている
		local vec = BMvTbl.GetVector();
		if( vec.y > 0 )
		{
			local pos = BMvTbl.GetPosition(0);
			if( pos.y > -def_POS_AirDashLimitHeight ) return 0;
		}
		
		//6+Dの場合、6+A+Dのときは失敗にする（JAグラとか優先に）
		if( BCMDTbl.GetSuccessButtonPos()==0 && BMvTbl.CheckCommandString( { command="A+D", lastdelay=1 } ) )
		{
			// _dpn("空中投げとかの仕込みっぽいので失敗にする");
			return 0;
		}

		//通常コマンドと同時押しが共存しているので2回チェックする
		//checktbl1で成功した場合、同時押しチェックが発生しないので、アサルト中に同時押しチェックがされる
		//checktbl2は同時押しチェックあり
		local checktbl1 =
		{
			SkillType = "None", PosState = "Air",
			MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] },
		};
		if( Battle_Std.CmdCheck( checktbl1 ) ==1 ) // 最初の成功
		{
			return 1;
		}
		
		local checktbl2 =
		{
			SkillType = "NoneDouji", PosState = "Air",
			MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] },
		};		
		return( Battle_Std.CmdCheck( checktbl2 ) );
	}
	UpdateTable = { name = "Mv_Assault_Air", }
}	
	
}
else
{
	
t.Assault_Air <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Assault_Air, name = "Cmd_Assault_Air", command = [ "6+D","0606","6+A+B" ],
	flags = [ "lastdelay" ], posstatus = _PosState_Air,
	Check = function()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if( BMvTbl.AddAirCount( def_AC_Assault, 0 ) != 0 ) return 0; // アサルト回数チェック

		//通常コマンドと同時押しが共存しているので2回チェックする
		//checktbl1で成功した場合、同時押しチェックが発生しないので、アサルト中に同時押しチェックがされる
		//checktbl2は同時押しチェックあり
		local checktbl1 =
		{
			HeightLimit = def_POS_AirDashLimitHeight, SkillType = "None", PosState = "Air",
			MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] },
		};
		if( Battle_Std.CmdCheck( checktbl1 ) ==1 ) // 最初の成功
		{
			return 1;
		}
		
		local checktbl2 =
		{
			HeightLimit = def_POS_AirDashLimitHeight, SkillType = "NoneDouji", PosState = "Air",
			MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] },
		};		
		return( Battle_Std.CmdCheck( checktbl2 ) );
	}
	UpdateTable = { name = "Mv_Assault_Air", }
}

}


if( Def_Rule_GameSystem == Def_RGS_UNI )
{
	t.GCAttack_Std <-
	{
		cmdtmplflags = Def_SCT_Common,
		num = def_CN_GCAttack_Std, name = "Cmd_GCAttack_Std", command = [ "6+A+B+C","@H,6+A+B+C@" ], usegauge = 10000,
		CmdCheck = { SkillType = "GuardCancel", MvCheck = { Only = ["Mv_Guard"] },
		Cost = { ComboGauge = 10000 } },
		flags = [ "lastdelay" ],
		CmdBeforeStdFunc = function()
		{
			//暗転返しのときだけ6+A+B+Cおしっぱで出せるようにする
			local btn_pos = BCMDTbl.GetSuccessButtonPos();
			if( btn_pos == 1 )
			{
				if( Battle_Std.MoveCodeEx.CheckFlag( 2, def_MC2_EnemyAntenStop ) )
				{
					_dpn("暗転されたときなので6+A+B+Cホールドで出せる");
				}
				else
				{
					return 0;
				}
			}
		}
		CmdAfterStdFunc = function()
		{
			//入力完了したら無敵にして光らせる（そうしないとヒットストップ密度高い攻撃が割れない）
			Battle_Std.SetCharaFlash_GuardCansel(); //GCで発光
			local muteki_frame = 20;
			BMvEff.SetPlayerTimer( { muteki_dage=muteki_frame, muteki_dageX=muteki_frame, muteki_nage=muteki_frame, muteki_nageX=muteki_frame } );
			
			BMvTbl.SetPP(def_PP_GuardCancelStatus,0); // 初期化
			return 1;
		}
		UpdateTable = { name = "Mv_GuardCancelAttack", }
	}			
}

t.ForwardShift <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_ForwardShift, name = "Cmd_ForwardShift", command = ["3+D","@H,3D@"],
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中

		//暗転返しのときだけ3Dおしっぱで出せるようにする
		local btn_pos = BCMDTbl.GetSuccessButtonPos();
		// _dpn(btn_pos);
		if( btn_pos == 1 )
		{
			if( Battle_Std.MoveCodeEx.CheckFlag( 2, def_MC2_EnemyAntenStop ) )
			{
				_dpn("暗転されたときなので3Dホールドで出せる");
			}
			else
			{
				return 0;
			}
		}
		
		return 1;
	},
	CmdCheck = { SkillType = "None", MvCheck = { Fail = ["Mv_ForwardShift"] }, },
	UpdateTable = { name = "Mv_ForwardShift", }
}

if( Def_Rule_GameSystem == Def_RGS_UNI )
{
//ダッシュの行動可能時に出せるダッシュ攻撃（ダッシュから同時押しが出せないの回避）
t.Atk_DashStdBandC <-
{
	num = def_CN_Atk_DashStdBandC, name = "Cmd_Atk_DashStdBandC_Normal", command = ["0606+B+C","060@D,9@6B+C@D,7@","6+B+C"],
	CmdCheck = { SkillType = "None", ComboLimit = DEF_BS_CL_DASHSTDC, MvCheck_CmdPos = { [2] = { DoujiOnly = ["Mv_DashWait_F","Mv_Dash_F"] }, } },
	flags = [ "lastdelay" ], //1F増加
	function CmdBeforeStdFunc()
	{
		// コマンドチェック処理が変わっていて、旧UNIっぽい操作感を出すために特殊なチェックを行う
		if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
		{
			if( Battle_Std.GS_CheckFlag( def_PP_GS_DashStickHoldEnd ) ) // ダッシュ中レバーを前要素から外した
			{
				return 0;
			}

			local cmd_spos = BCMDTbl.GetSuccessButtonPos();
			if( cmd_spos == 2 )
			{
			}
			else if( cmd_spos == 0 || cmd_spos == 1 )
			{
				// 06060Xとかでも出てしまうので、チェック
				// 前とボタンが押されていたことだけは厳密に見る
				if( !BMvTbl.CheckCommandString( { command="6+B+C", lastdelay=1 } ) )
				{
					return 0;
				}
			}
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Atk_DashStdBandC", }
}

	
//ダッシュの行動可能時に出せるダッシュ攻撃（ダッシュから同時押しが出せないの回避）
t.Atk_DashStdC_Normal <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_DashStdC_Normal, name = "Cmd_Atk_DashStdC_Normal", command = "6+C",
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_DASHSTDC, MvCheck = { Only = ["Mv_DashWait_F","Mv_Dash_F"] }, },
	flags = [ "lastdelay" ], //1F増加
	function CmdBeforeStdFunc()
	{
		if( Battle_Std.GS_CheckFlag( def_PP_GS_DashStickHoldEnd ) ) // ダッシュ中レバーを前要素から外した
		{
			return 0;
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Atk_DashStdC", }
}

//ダッシュの行動可能時に出せるダッシュ攻撃（ダッシュから同時押しが出せないの回避）
t.Atk_DashStdB_Normal <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_DashStdB_Normal, name = "Cmd_Atk_DashStdB_Normal", command = ["6+B"],
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_DASHSTDB, MvCheck = { Only = ["Mv_DashWait_F","Mv_Dash_F"] }, },
	flags = [ "lastdelay" ], //1F増加
	function CmdBeforeStdFunc()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		if( Battle_Std.GS_CheckFlag( def_PP_GS_DashStickHoldEnd ) ) // ダッシュ中レバーを前要素から外した
		{
			return 0;
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Atk_DashStdB", }
}

//生だしダッシュ攻撃
t.Atk_DashStdC_Direct <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_DashStdC_Direct, name = "Cmd_Atk_DashStdC_Direct", command = ["0606+C","060@D,9@6C@D,7@"],
	CmdCheck = { SkillType = "None", ComboLimit = DEF_BS_CL_DASHSTDC, },
	flags = [ "lastdelay" ], //1F増加
	function CmdBeforeStdFunc()
	{
		// コマンドチェック処理が変わっていて、旧UNIっぽい操作感を出すために特殊なチェックを行う
		if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
		{
			if( Battle_Std.GS_CheckFlag( def_PP_GS_DashStickHoldEnd ) ) // ダッシュ中レバーを前要素から外した
			{
				return 0;
			}
			local cmd_spos = BCMDTbl.GetSuccessButtonPos();
			if( cmd_spos == 1 ) // 0606Xの方
			{
				// 06060Xとかでも出てしまうので、チェック
				// 前とボタンが押されていたことだけは厳密に見る
				if( !BMvTbl.CheckCommandString( { command="6+C", lastdelay=1 } ) )
				{
					return 0;
				}
			}
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Atk_DashStdC", }
}

//生だしダッシュ攻撃
t.Atk_DashStdB_Direct <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_DashStdB_Direct, name = "Cmd_Atk_DashStdB_Direct", command = ["0606+B","060@D,9@6B@D,7@"],
	CmdCheck = { SkillType = "None", ComboLimit = DEF_BS_CL_DASHSTDB, },
	flags = [ "lastdelay" ], //1F増加
	function CmdBeforeStdFunc()
	{
		// コマンドチェック処理が変わっていて、旧UNIっぽい操作感を出すために特殊なチェックを行う
		if( BMvTbl.IsCpu()==0 ) // プレイヤーの時
		{
			if( Battle_Std.GS_CheckFlag( def_PP_GS_DashStickHoldEnd ) ) // ダッシュ中レバーを前要素から外した
			{
				return 0;
			}
			local cmd_spos = BCMDTbl.GetSuccessButtonPos();
			if( cmd_spos == 1 ) // 0606Xの方
			{
				// 06060Xとかでも出てしまうので、チェック
				// 前とボタンが押されていたことだけは厳密に見る
				if( !BMvTbl.CheckCommandString( { command="6+B", lastdelay=1 } ) )
				{
					return 0;
				}
			}
		}
		return 1;
	}
	UpdateTable = { name = "Mv_Atk_DashStdB", }
}
}
if( Def_Rule_GameSystem == Def_RGS_UNI )
{
t.Atk_CroC <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_CroC, name = "Cmd_Atk_CroC", command = [ "2+C", "1+C", "3+C" ],
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_CROC, },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_CroC", }
}

t.Atk_CroB <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_CroB, name = "Cmd_Atk_CroB", command = [ "2+B", "1+B", "3+B" ],
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_CROB, },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_CroB", }
	function CmdBeforeStdFunc()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		return 1;
	}	
}

t.Atk_CroA <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_CroA, name = "Cmd_Atk_CroA", command = [ "2+A", "1+A", "3+A" ],
	CmdCheck = { SkillType = "NormalRapid", ComboLimit = DEF_BS_CL_CROA, },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_CroA", }
	function CmdBeforeStdFunc()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		return 1;
	}
}

t.Atk_StdC <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_StdC, name = "Cmd_Atk_StdC", command = [ "0+C","4+C","6+C","8+C","7+C","9+C" ],
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_STDC, },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_StdC", }
}

t.Atk_StdB <-
{
	cmdtmplflags = Def_SCT_Common,
	//"0+B","4+B","6+B","8+B","7+B","9+B" の順番変えるとナナセの性能かわるから注意ね
	num = def_CN_Atk_StdB, name = "Cmd_Atk_StdB", command = [ "0+B","4+B","6+B","8+B","7+B","9+B" ],
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_STDB },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_StdB", }
	function CmdBeforeStdFunc()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		return 1;
	}
}

//これかえるときはA連コンボもチェックね
t.Atk_StdA <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_StdA, name = "Cmd_Atk_StdA", command = [ "0+A","4+A","6+A","8+A","7+A","9+A" ],
	CmdCheck = { SkillType = "NormalRapid", ComboLimit = DEF_BS_CL_STDA },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_Atk_StdA", }
	function CmdBeforeStdFunc()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		return 1;
	}
}

t.Atk_AirC <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_AirC, name = "Cmd_Atk_AirC", command = "C", posstatus = _PosState_Air,
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_AIRC },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirC() ) return 0;
		return 1;
	},
	flags = [ "lastdelay","airskill" ], //1F増加
	UpdateTable = { name = "Mv_Atk_AirC", }
}

t.Atk_AirB <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_AirB, name = "Cmd_Atk_AirB", command = "B", posstatus = _PosState_Air,
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_AIRB },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirB() ) return 0;
		return 1;
	},
	flags = [ "lastdelay","airskill" ], //1F増加
	UpdateTable = { name = "Mv_Atk_AirB", }
}

t.Atk_AirA <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Atk_AirA, name = "Cmd_Atk_AirA", command = "A", posstatus = _PosState_Air,
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_AIRA },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirA() ) return 0;
		return 1;
	},
	flags = [ "lastdelay","airskill" ], //1F増加
	UpdateTable = { name = "Mv_Atk_AirA", }
}
}

if( Def_Rule_GameSystem == Def_RGS_UNI )
{
local GroShieldFailMv = (Def_Sys_EnableDashShieldCommand)? [] : ["Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F"];
	
//シールド
t.Barrier_Cro <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Barrier_Cro, name = "Cmd_Barrier_Cro", command = ["1+D","@H,1D@"],
	function CmdBeforeStdFunc()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if( !Battle_Std.CheckShieldHoldCommandStrict(1) ) return 0; // ホールドは漏れやすいので厳密にチェック
		return 1;
	},
	CmdCheck = { SkillType = "None", MvCheck = { Fail = GroShieldFailMv }, },
	UpdateTable = { name = "Mv_Barrier_Cro", }
}

t.Barrier_Std <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Barrier_Std, name = "Cmd_Barrier_Std", command = ["4+D","@H,4D@","6+D"],
	function CmdBeforeStdFunc()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		
		// 最後のcmdの"6+D"は、めくりジャンプ攻撃をシールドするためのもの
		// うしろ入れっぱなしでガードしつつ、シールドしようとしてアサルトがもれないようにする

		local cmd_spos = BCMDTbl.GetSuccessButtonPos(); // CPUだと0固定なので注意
		if( BMvTbl.IsCpu() && BMvTbl.CheckCommandString( { command="6" } ) )
		{
			// CPUだとcmd_sposを見て弾けないので6に入っていたら強制的に失敗にする
			return 0;
		}
		if( cmd_spos == 2 )
		{
			if( !Def_Sys_EnableCrossupBarrier ) return 0; // 通常時は失敗
			
			local enable = 0;
			// 後ろ歩き中の操作以外認めない
			if( Battle_Std.IsMatchMvNameArray( "Mv_Walk_B" ) && BMvTbl.CheckFurimuki() )
			{
				// 後ろ歩き中に振り向き予定で、かつ6+Dを入れていた＝後退中にめくられたとき、と決め打ち
				enable = 1;
			}
			// 表裏ガードっぽいところなら・・・（これを入れると、めくりジャンプ攻撃に対してアサルトは一切でない）
			// テクとして66DとするとダッシュになってMvで弾かれるので、アサルトは出せる
			{
				local enemy = BMvCore.GetEnemyCharaData();
				if( enemy.push() )
				{
					local epos = BMvTbl.GetPosition();
					local emuki = BMvTbl.GetMuki();
					local efurimuki = BMvTbl.CheckFurimuki();
					
					// このチェックをするなら、空中必殺技や空中アサルト、ジャンプ系統も検知してほしい
					// 色々やってくと難しいので、これはチェックせず、位置関係だけ見るようにする
					// そもそもこの位置関係でアサルトを出すことは・・・ないはず
					// local enemy_is_airatk = Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_AtkJump );
					
					enemy.pop();
					
					local ppos = BMvTbl.GetPosition();
					local pmuki = BMvTbl.GetMuki();
					local kyori = abs(ppos.x-epos.x);
					
					// _dpn("epos.y:"+epos.y/128+" kyori:"+kyori/128+" emuki:"+emuki+" pmuki:"+pmuki+" efurimuki:"+efurimuki);
					// 同じ向きで、相手が振り向き希望（めくり攻撃中）のとき
					// シールドが取れる範囲内でいて欲しいので、そこそこ近い距離限定
					if( emuki == pmuki && efurimuki && epos.y < -150*128 && kyori < 300*128 )
					{
						// _dpn("有効");
						enable = 1;
					}
				}
			}
			if( !enable )
			{
				return 0;
			}
		}

		if( !Battle_Std.CheckShieldHoldCommandStrict(1) ) return 0; // ホールドは漏れやすいので厳密にチェック

		return 1;
	},
	CmdCheck = { SkillType = "None", MvCheck = { Fail = GroShieldFailMv }, },
	UpdateTable = { name = "Mv_Barrier_Std", }
}

t.Barrier_Air <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Barrier_Air, name = "Cmd_Barrier_Air", command = ["4+D","7+D","1+D","@H,471D@"],
	posstatus = _PosState_Air,
	function CmdBeforeStdFunc()
	{
		//GRDブレイク中は出せない
		local grd = BMvEff.GRD_GetBreak( 0 ); //自分のブレイク状態取得
		if( grd==1 || grd==255 ) return 0; //ブレイクorオーバーブレイク中
		if( !Battle_Std.CheckShieldHoldCommandStrict(3) ) return 0; // ホールドは漏れやすいので厳密にチェック
		return 1;
	},
	flags = [ "airskill" ],
	CmdCheck = { SkillType = "None", PosState = "Air", MvCheck = { Fail = ["Mv_Assault_Std","Mv_Assault_Air"] } },
	UpdateTable = { name = "Mv_Barrier_Air", }
}
}

t.Crouch <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Crouch, name = "Cmd_Crouch", command = "v",
//	flags = [ "roundstart" ],
	posstatus = _PosState_Stand,
	function CmdBeforeStdFunc()
	{
		if( Battle_Std.MoveCode.CheckFlag( _MoveCode0_NoMoveBasicAction ) ) return 0; // 歩き・しゃがみ移行不可
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;		
		return 1;
	}
	CmdCheck = { SkillType = "None", PosState = "Stand", MvCheck = { Fail = ["Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F"] } },
	UpdateTable = { name = "Mv_Crouch", }
}

t.Walk_F <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Walk_F, name = "Cmd_Walk_F", command = "6",
//	flags = [ "roundstart" ],
	function CmdBeforeStdFunc()
	{
		if( Battle_Std.MoveCode.CheckFlag( _MoveCode0_NoMoveBasicAction ) ) return 0; // 歩き・しゃがみ移行不可
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;
		return 1;
	}
	CmdCheck = { SkillType = "None", MvCheck = { Fail = ["Mv_Walk_F","Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F","Mv_Walk_B"] } },
	UpdateTable = { name = "Mv_Walk_F", }
}

t.Walk_B <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_Walk_B, name = "Cmd_Walk_B", command = "4",
//	flags = [ "roundstart" ],
	function CmdBeforeStdFunc()
	{
		if( Battle_Std.MoveCode.CheckFlag( _MoveCode0_NoMoveBasicAction ) ) return 0; // 歩き・しゃがみ移行不可
		if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;
		return 1;
	}
	CmdCheck = { SkillType = "None", MvCheck = { Fail = ["Mv_Walk_B","Mv_DashWait_F","Mv_Dash_F","Mv_DashStop_F","Mv_VGuard_Stand","Mv_VGuard_Crouch"] } },
	UpdateTable = { name = "Mv_Walk_B", }
}

t.MultiJump_F <- 
{ //-------------------------------
	num = def_CN_MultiJump_F, name = "Cmd_MultiJump_F", command = "9",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump, // 振り向き予定の方向に対してコマンドチェック
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "None", PosState = "Air", AirJumpLimit = 1, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_F", }
}

t.MultiJump_N <- 
{ //-------------------------------
	num = def_CN_MultiJump_N, name = "Cmd_MultiJump_N", command = "8",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump,
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "None", PosState = "Air", AirJumpLimit = 1, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_N", }
}

t.MultiJump_B <- 
{ //-------------------------------
	num = def_CN_MultiJump_B, name = "Cmd_MultiJump_B", command = "7",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump,
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "None", PosState = "Air", AirJumpLimit = 1, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_B", }
}

t.MultiJumpCancel_F <- 
{ //-------------------------------
	num = def_CN_MultiJumpCancel_F, name = "Cmd_MultiJumpCancel_F", command = "9",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump,
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "NormalJump", PosState = "Air", AirJumpLimit = 1, HitStatus=Def_Rule_CmdHitStatus_JumpCancel, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_F", }
}

t.MultiJumpCancel_N <- 
{ //-------------------------------
	num = def_CN_MultiJumpCancel_N, name = "Cmd_MultiJumpCancel_N", command = "8",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump,
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "NormalJump", PosState = "Air", AirJumpLimit = 1, HitStatus=Def_Rule_CmdHitStatus_JumpCancel, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_N", }
}

t.MultiJumpCancel_B <- 
{ //-------------------------------
	num = def_CN_MultiJumpCancel_B, name = "Cmd_MultiJumpCancel_B", command = "7",
	commandcheckmuki = Def_Rule_CmdCheckMuki_MultiJump,
	posstatus = _PosState_Air,
//	flags = [ "roundstart" ],
	CmdCheck = { SkillType = "NormalJump", PosState = "Air", AirJumpLimit = 1, HitStatus=Def_Rule_CmdHitStatus_JumpCancel, HeightLimit = def_POS_AirDashLimitHeight },
	UpdateTable = { name = "Mv_MultiJump_B", }
}


// コマンド
t.Skill_CircleEX <- 
{ //-------------------------------
	num = def_CN_Skill_CircleEX, name = "Cmd_Skill_CircleEX",
	command = [ "@R,1@C","41236^C","63214^C", "4136^C","6314^C","4236^C","4126^C","6214^C","6324^C" ], usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_CircleEX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecialJump", },
	UpdateTable = { name = "Mv_Skill_CircleEX", }
}

t.Skill_CircleC <- 
{ //-------------------------------
	num = def_CN_Skill_CircleC, name = "Cmd_Skill_CircleC", 
	command = [ "@R,1@C","41236^C","63214^C", "4136^C","6314^C","4236^C","4126^C","6214^C","6324^C" ],
	CmdCheck = { SkillType="SpecialJump", MvCheck={ SkillFail="Mv_Skill_CircleC"}, },
	UpdateTable = { name = "Mv_Skill_CircleC", }
}

t.Skill_CircleBorC <- 
{ //-------------------------------
	num = def_CN_Skill_CircleB, name = "Cmd_Skill_CircleB", 
	command = [ "@R,1@C","@R,1@B","41236^B","63214^B","41236^C","63214^C", "4136^B","6314^B","4236^B","4126^B","6214^B","6324^B", "4136^C","6314^C","4236^C","4126^C","6214^C","6324^C" ],
	CmdCheck = { SkillType="SpecialJump", MvCheck={ SkillFail="Mv_Skill_CircleB"}, },
	UpdateTable = { name = "Mv_Skill_CircleB", }
}

t.Skill_CircleB <- 
{ //-------------------------------
	num = def_CN_Skill_CircleB, name = "Cmd_Skill_CircleB", 
	command = [ "@R,1@B","41236^B","63214^B", "4136^B","6314^B","4236^B","4126^B","6214^B","6324^B" ],
	CmdCheck = { SkillType="SpecialJump", MvCheck={ SkillFail="Mv_Skill_CircleB"}, },
	UpdateTable = { name = "Mv_Skill_CircleB", }
}

t.Skill_CircleA <- 
{ //-------------------------------
	num = def_CN_Skill_CircleA, name = "Cmd_Skill_CircleA", 
	command = [ "@R,1@A","41236^A","63214^A", "4136^A","6314^A","4236^A","4126^A","6214^A","6324^A" ],
	CmdCheck = { SkillType="SpecialJump", MvCheck={ SkillFail="Mv_Skill_CircleA"}, },
	UpdateTable = { name = "Mv_Skill_CircleA", }
}

if( Def_Sys_SSRelayType )
{
	
t.Skill_41236SP <- 
{ //-------------------------------
	num = def_CN_Skill_41236SP, name = "Cmd_Skill_41236SP", command = ["41@D,13@236D",Def_CMD_Ex0_41236D,Def_CMD_Ex1_41236D,Def_CMD_Ex2_41236D,"41@D,13@236D@L,30@",Def_CMD_ExA_41236D,Def_CMD_ExB_41236D,Def_CMD_ExC_41236D], usegauge = 20000,
	CmdBeforeStdFunc = function()
	{
		if( !Battle_Std.CheckSSRelayAtkExCancel( 4 ) ) return 0; // ステアエンダー後のみ有効なコマンドチェック
		return 1;
	}	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236SP"}, Cost = { ComboGauge = "OverLiberate" }, SkillType = "SpSpecial", },
	UpdateTable = { name = "Mv_Skill_41236SP", }
}
	
}
else
{
t.Skill_41236SP <- 
{ //-------------------------------
	num = def_CN_Skill_41236SP, name = "Cmd_Skill_41236SP", command = ["41@D,13@236D"], usegauge = 20000,
	CmdBeforeStdFunc = function()
	{
		return 1;
	}	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236SP"}, Cost = { ComboGauge = "OverLiberate" }, SkillType = "SpSpecial", },
	UpdateTable = { name = "Mv_Skill_41236SP", }
}
}

// A+B+CでのIW発動
// コンボVO経由のコンボのみの仕様
t.Skill_41236SP_ABC <- 
{ //-------------------------------
	num = def_CN_Skill_41236SP_ABC, name = "Cmd_Skill_41236SP_ABC", command = ["A+B+C","A+B+C@L,30@"], usegauge = 20000,
	posstatus = _PosState_Always,
	CmdBeforeStdFunc = function()
	{
		// 基本的に地上じゃないと出せないけど、ステアエンダー中は同時押しの猶予として空中でも出せるようにする
		if( BCMDTbl.CheckPosState( _PosState_Ground ) )
		{
			// 地上
		}
		else
		{
			// 空中
			if( Battle_Std.IsMatchMvNameArray( ["Mv_Skill_SSRelayAtk"] ) )
			{
				local info0 = BCMDTbl.GetCmdInfoEx(0);
				if( info0.GetFrame() > 2 ) return 0;

				// 成功
			}
			else
			{
				return 0;
			}
		}

		if( !Battle_Std.CheckSSRelayAtkExCancel( 1 ) ) return 0; // ステアエンダー後のみ有効なコマンドチェック

		// クロスキャストヴェールオフ中のみA+B+CでIWが出せるよ
		local gauge_status = BMvEff.Liberate_Get();
		if( gauge_status == _SpGaugeMode_Normal ) return 0; //ゲージVO状態でしか出せない
		if( BMvEff.Liberate_GetType() != _LiberateType_Combo ) return 0;
		
		return 1;
	}
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236SP"}, Cost = { ComboGauge = "OverLiberate" }, SkillType = "SpSpecial", },
	UpdateTable = { name = "Mv_41236SP_ABC", }
}

t.Skill_41236EX <- 
{ //-------------------------------
	num = def_CN_Skill_41236EX, name = "Cmd_Skill_41236EX", command = [Def_CMD_236BC], usegauge = 10000, // 2141236Cに変更
	// num = def_CN_Skill_41236EX, name = "Cmd_Skill_41236EX", command = "412@N,2@@D,8@36C", usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecialDouji", },
	UpdateTable = { name = "Mv_Skill_41236EX", }
}

t.Skill_41236C <- 
{ //-------------------------------
	num = def_CN_Skill_41236C, name = "Cmd_Skill_41236C", command = [Def_CMD_41236C,Def_CMD_Ex0_41236C,Def_CMD_Ex1_41236C,Def_CMD_Ex2_41236C],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236C"}, },
	UpdateTable = { name = "Mv_Skill_41236C", }
}

t.Skill_41236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_41236B, name = "Cmd_Skill_41236B", command = [Def_CMD_41236B,Def_CMD_Ex0_41236B,Def_CMD_Ex1_41236B,Def_CMD_Ex2_41236B,Def_CMD_41236C,Def_CMD_Ex0_41236C,Def_CMD_Ex1_41236C,Def_CMD_Ex2_41236C],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236B"}, },
	UpdateTable = { name = "Mv_Skill_41236B", }
}

t.Skill_41236B <- 
{ //-------------------------------
	num = def_CN_Skill_41236B, name = "Cmd_Skill_41236B", command = [Def_CMD_41236B,Def_CMD_Ex0_41236B,Def_CMD_Ex1_41236B,Def_CMD_Ex2_41236B],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236B"}, },
	UpdateTable = { name = "Mv_Skill_41236B", }
}

t.Skill_41236A <- 
{ //-------------------------------
	num = def_CN_Skill_41236A, name = "Cmd_Skill_41236A", command = [Def_CMD_41236A,Def_CMD_Ex0_41236A,Def_CMD_Ex1_41236A,Def_CMD_Ex2_41236A],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_41236A"}, },
	UpdateTable = { name = "Mv_Skill_41236A", }
}


t.Skill_63214EX <- 
{ //-------------------------------
	num = def_CN_Skill_63214EX, name = "Cmd_Skill_63214EX", command = [Def_CMD_214BC], usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_63214EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecialDouji", },
	UpdateTable = { name = "Mv_Skill_63214EX", }
}

t.Skill_63214C <- 
{ //-------------------------------
	num = def_CN_Skill_63214C, name = "Cmd_Skill_63214C", command = [Def_CMD_63214C,Def_CMD_Ex0_63214C,Def_CMD_Ex1_63214C,Def_CMD_Ex2_63214C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_63214C"}, },
	UpdateTable = { name = "Mv_Skill_63214C", }
}

t.Skill_63214BorC <- 
{ //-------------------------------
	num = def_CN_Skill_63214B, name = "Cmd_Skill_63214B", command = [Def_CMD_63214B,Def_CMD_63214C,Def_CMD_Ex0_63214B,Def_CMD_Ex1_63214B,Def_CMD_Ex2_63214B,Def_CMD_Ex0_63214C,Def_CMD_Ex1_63214C,Def_CMD_Ex2_63214C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_63214B"}, },
	UpdateTable = { name = "Mv_Skill_63214B", }
}

t.Skill_63214B <- 
{ //-------------------------------
	num = def_CN_Skill_63214B, name = "Cmd_Skill_63214B", command = [Def_CMD_63214B,Def_CMD_Ex0_63214B,Def_CMD_Ex1_63214B,Def_CMD_Ex2_63214B],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_63214B"}, },
	UpdateTable = { name = "Mv_Skill_63214B", }
}

t.Skill_63214A <- 
{ //-------------------------------
	num = def_CN_Skill_63214A, name = "Cmd_Skill_63214A", command = [Def_CMD_63214A,Def_CMD_Ex0_63214A,Def_CMD_Ex1_63214A,Def_CMD_Ex2_63214A],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_63214A"}, },
	UpdateTable = { name = "Mv_Skill_63214A", }
}

t.Skill_236EX <- 
{ //-------------------------------
	num = def_CN_Skill_236EX, name = "Cmd_Skill_236EX", command = Def_CMD_236C, usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_236EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_236EX", }
}

t.Skill_236C <- 
{ //-------------------------------
	num = def_CN_Skill_236C, name = "Cmd_Skill_236C", command = Def_CMD_236C,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_236C"}, },
	UpdateTable = { name = "Mv_Skill_236C", }
}

t.Skill_236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_236B, name = "Cmd_Skill_236B", command = [Def_CMD_236B,Def_CMD_236C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_236B"}, },
	UpdateTable = { name = "Mv_Skill_236B", }
}

t.Skill_236B <- 
{ //-------------------------------
	num = def_CN_Skill_236B, name = "Cmd_Skill_236B", command = Def_CMD_236B,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_236B"}, },
	UpdateTable = { name = "Mv_Skill_236B", }
}

t.Skill_236A <- 
{ //-------------------------------
	num = def_CN_Skill_236A, name = "Cmd_Skill_236A", command = Def_CMD_236A,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_236A"}, },
	UpdateTable = { name = "Mv_Skill_236A", }
}

t.Skill_623EX <- 
{ //-------------------------------
	num = def_CN_Skill_623EX, name = "Cmd_Skill_623EX", command = [Def_CMD_623C], usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_623EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_623EX", }
}

t.Skill_623C <- 
{ //-------------------------------
	num = def_CN_Skill_623C, name = "Cmd_Skill_623C", command = [Def_CMD_623C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_623C"}, },
	UpdateTable = { name = "Mv_Skill_623C", }
}

t.Skill_623BorC <- 
{ //-------------------------------
	num = def_CN_Skill_623B, name = "Cmd_Skill_623B", command = [Def_CMD_623B,Def_CMD_623C],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_623B"}, },
	UpdateTable = { name = "Mv_Skill_623B", }
}

t.Skill_623B <- 
{ //-------------------------------
	num = def_CN_Skill_623B, name = "Cmd_Skill_623B", command = [Def_CMD_623B],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_623B"}, },
	UpdateTable = { name = "Mv_Skill_623B", }
}

t.Skill_623A <- 
{ //-------------------------------
	num = def_CN_Skill_623A, name = "Cmd_Skill_623A", command = [Def_CMD_623A],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_623A"}, },
	UpdateTable = { name = "Mv_Skill_623A", }
}

t.Skill_214EX <- 
{ //-------------------------------
	num = def_CN_Skill_214EX, name = "Cmd_Skill_214EX", command = Def_CMD_214C, usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_214EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_214EX", }
}

t.Skill_214BC <- 
{ //-------------------------------
	num = def_CN_Skill_214BC, name = "Cmd_Skill_214BC", command = Def_CMD_214BC,	
	CmdCheck = { SkillType = "SpecialBC", MvCheck={ SkillFail="Mv_Skill_214BC"} },
	UpdateTable = { name = "Mv_Skill_214BC", }
}

t.Skill_214C <- 
{ //-------------------------------
	num = def_CN_Skill_214C, name = "Cmd_Skill_214C", command = Def_CMD_214C,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_214C"}, },
	UpdateTable = { name = "Mv_Skill_214C", }
}

t.Skill_214BorC <- 
{ //-------------------------------
	num = def_CN_Skill_214B, name = "Cmd_Skill_214B", command = [Def_CMD_214B,Def_CMD_214C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_214B"}, },
	UpdateTable = { name = "Mv_Skill_214B", }
}

t.Skill_214B <- 
{ //-------------------------------
	num = def_CN_Skill_214B, name = "Cmd_Skill_214B", command = Def_CMD_214B,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_214B"}, },
	UpdateTable = { name = "Mv_Skill_214B", }
}

t.Skill_214A <- 
{ //-------------------------------
	num = def_CN_Skill_214A, name = "Cmd_Skill_214A", command = Def_CMD_214A,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_214A"}, },
	UpdateTable = { name = "Mv_Skill_214A", }
}

t.Skill_421EX <- 
{ //-------------------------------
	num = def_CN_Skill_421EX, name = "Cmd_Skill_421EX", command = [Def_CMD_421C], usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_421EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_421EX", }
}

t.Skill_421C <- 
{ //-------------------------------
	num = def_CN_Skill_421C, name = "Cmd_Skill_421C", command = [Def_CMD_421C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_421C"}, },
	UpdateTable = { name = "Mv_Skill_421C", }
}

t.Skill_421BorC <- 
{ //-------------------------------
	num = def_CN_Skill_421B, name = "Cmd_Skill_421B", command = [Def_CMD_421B,Def_CMD_421C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_421B"}, },
	UpdateTable = { name = "Mv_Skill_421B", }
}

t.Skill_421B <- 
{ //-------------------------------
	num = def_CN_Skill_421B, name = "Cmd_Skill_421B", command = Def_CMD_421B,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_421B"}, },
	UpdateTable = { name = "Mv_Skill_421B", }
}

t.Skill_421A <- 
{ //-------------------------------
	num = def_CN_Skill_421A, name = "Cmd_Skill_421A", command = Def_CMD_421A,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_421A"}, },
	UpdateTable = { name = "Mv_Skill_421A", }
}

t.Skill_0202D <-
{ //-------------------------------
	num = def_CN_Skill_0202D, name = "Cmd_Skill_0202D", command = Def_CMD_22D,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202D"}, },
	UpdateTable = { name = "Mv_Skill_0202D", }
},
	
t.Skill_0202EX <- 
{ //-------------------------------
	num = def_CN_Skill_0202EX, name = "Cmd_Skill_0202EX", command = Def_CMD_22C, usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_0202EX", }
}

t.Skill_020202EX <- 
{ //-------------------------------
	num = def_CN_Skill_020202EX, name = "Cmd_Skill_020202EX", command = Def_CMD_22BC, usegauge = 10000,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_020202EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecialDouji", },
	UpdateTable = { name = "Mv_Skill_020202EX", }
}

t.Skill_0202C <- 
{ //-------------------------------
	num = def_CN_Skill_0202C, name = "Cmd_Skill_0202C", command = Def_CMD_22C,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202C"}, },
	UpdateTable = { name = "Mv_Skill_0202C", }
}

t.Skill_0202BorC <- 
{ //-------------------------------
	num =def_CN_Skill_0202B, name = "Cmd_Skill_0202B", command = [Def_CMD_22B,Def_CMD_22C],	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202B"}, },
	UpdateTable = { name = "Mv_Skill_0202B", }
}

t.Skill_0202B <- 
{ //-------------------------------
	num = def_CN_Skill_0202B, name = "Cmd_Skill_0202B", command = Def_CMD_22B,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202B"}, },
	UpdateTable = { name = "Mv_Skill_0202B", }
}

t.Skill_0202A <- 
{ //-------------------------------
	num = def_CN_Skill_0202A, name = "Cmd_Skill_0202A", command = Def_CMD_22A,
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_0202A"}, },
	UpdateTable = { name = "Mv_Skill_0202A", }
}

// ほぼバティスタの屈設置用だがここに定義しておかないと忘れそうなので追加しておく
t.Skill_C0202A <- 
{ //-------------------------------
	num = def_CN_Skill_C0202A, name = "Cmd_Skill_C0202A", command = Def_CMD_22A,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_C0202A"}, },
	UpdateTable = { name = "Mv_Skill_C0202A", }
}

t.Skill_C0202B <- 
{ //-------------------------------
	num = def_CN_Skill_C0202B, name = "Cmd_Skill_C0202B", command = Def_CMD_22B,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_C0202B"}, },
	UpdateTable = { name = "Mv_Skill_C0202B", }
}

t.Skill_C0202C <- 
{ //-------------------------------
	num = def_CN_Skill_C0202C, name = "Cmd_Skill_C0202C", command = Def_CMD_22C,	
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_C0202C"}, },
	UpdateTable = { name = "Mv_Skill_C0202C", }
}


t.Skill_J41236SP <- 
{ //-------------------------------
	num = def_CN_Skill_J41236EX, name = "Cmd_Skill_J41236SP", command = Def_CMD_41236D, usegauge = 20000,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236SP"}, PosState = "Air", Cost = { ComboGauge = "OverLiberate" }, SkillType = "SpSpecial", },
	UpdateTable = { name = "Mv_Skill_J41236SP", }
}

t.Skill_J41236EX <- 
{ //-------------------------------
	num = def_CN_Skill_J41236EX, name = "Cmd_Skill_J41236EX", command = [Def_CMD_236BC], usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecialDouji", },
	UpdateTable = { name = "Mv_Skill_J41236EX", }
}

t.Skill_J41236C <- 
{ //-------------------------------
	num = def_CN_Skill_J41236C, name = "Cmd_Skill_J41236C", command = [Def_CMD_41236C,Def_CMD_Ex0_41236C,Def_CMD_Ex1_41236C,Def_CMD_Ex2_41236C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J41236C", }
}

t.Skill_J41236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J41236B, name = "Cmd_Skill_J41236B", command = [Def_CMD_41236B,Def_CMD_Ex0_41236B,Def_CMD_Ex1_41236B,Def_CMD_Ex2_41236B,Def_CMD_41236C,Def_CMD_Ex0_41236C,Def_CMD_Ex1_41236C,Def_CMD_Ex2_41236C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J41236B", }
}

t.Skill_J41236B <- 
{ //-------------------------------
	num = def_CN_Skill_J41236B, name = "Cmd_Skill_J41236B", command = [Def_CMD_41236B,Def_CMD_Ex0_41236B,Def_CMD_Ex1_41236B,Def_CMD_Ex2_41236B], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J41236B", }
}

t.Skill_J41236A <- 
{ //-------------------------------
	num = def_CN_Skill_J41236A, name = "Cmd_Skill_J41236A", command = [Def_CMD_41236A,Def_CMD_Ex0_41236A,Def_CMD_Ex1_41236A,Def_CMD_Ex2_41236A], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J41236A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J41236A", }
}


t.Skill_J63214SP <- 
{ //-------------------------------
	num = def_CN_Skill_J63214EX, name = "Cmd_Skill_J63214SP", command = Def_CMD_63214D, usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214SP"}, PosState = "Air", Cost = { ComboGauge = "OverLiberate" }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J63214SP", }
}

t.Skill_J63214EX <- 
{ //-------------------------------
	num = def_CN_Skill_J63214EX, name = "Cmd_Skill_J63214EX", command = [Def_CMD_63214C,Def_CMD_Ex0_63214C,Def_CMD_Ex1_63214C,Def_CMD_Ex2_63214C], usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J63214EX", }
}

t.Skill_J63214C <- 
{ //-------------------------------
	num = def_CN_Skill_J63214C, name = "Cmd_Skill_J63214C", command = [Def_CMD_63214C,Def_CMD_Ex0_63214C,Def_CMD_Ex1_63214C,Def_CMD_Ex2_63214C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J63214C", }
}

t.Skill_J63214BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J63214B, name = "Cmd_Skill_J63214B", command = [Def_CMD_63214B,Def_CMD_63214C,Def_CMD_Ex0_63214B,Def_CMD_Ex1_63214B,Def_CMD_Ex2_63214B,Def_CMD_Ex0_63214C,Def_CMD_Ex1_63214C,Def_CMD_Ex2_63214C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J63214B", }
}

t.Skill_J63214B <- 
{ //-------------------------------
	num = def_CN_Skill_J63214B, name = "Cmd_Skill_J63214B", command = [Def_CMD_63214B,Def_CMD_Ex0_63214B,Def_CMD_Ex1_63214B,Def_CMD_Ex2_63214B], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J63214B", }
}

t.Skill_J63214A <- 
{ //-------------------------------
	num = def_CN_Skill_J63214A, name = "Cmd_Skill_J63214A", command = [Def_CMD_63214A,Def_CMD_Ex0_63214A,Def_CMD_Ex1_63214A,Def_CMD_Ex2_63214A], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J63214A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J63214A", }
}

t.Skill_J236EX <- 
{ //-------------------------------
	num = def_CN_Skill_J236EX, name = "Cmd_Skill_J236EX", command = Def_CMD_236C, usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J236EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J236EX", }
}

t.Skill_J236C <- 
{ //-------------------------------
	num = def_CN_Skill_J236C, name = "Cmd_Skill_J236C", command = Def_CMD_236C, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J236C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J236C", }
}

t.Skill_J236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J236B, name = "Cmd_Skill_J236B", command = [Def_CMD_236B,Def_CMD_236C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J236B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J236B", }
}

t.Skill_J236B <- 
{ //-------------------------------
	num = def_CN_Skill_J236B, name = "Cmd_Skill_J236B", command = Def_CMD_236B, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J236B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J236B", }
}

t.Skill_J236A <- 
{ //-------------------------------
	num = def_CN_Skill_J236A, name = "Cmd_Skill_J236A", command = Def_CMD_236A, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J236A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J236A", }
}

t.Skill_J623EX <- 
{ //-------------------------------
	num = def_CN_Skill_J623EX, name = "Cmd_Skill_J623EX", command = [Def_CMD_623C,], usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J623EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J623EX", }
}

t.Skill_J623C <- 
{ //-------------------------------
	num = def_CN_Skill_J623C, name = "Cmd_Skill_J623C", command = [Def_CMD_623C,], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J623C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J623C", }
}

t.Skill_J623BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J623B, name = "Cmd_Skill_J623B", command = [Def_CMD_623B,Def_CMD_623C,], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J623B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J623B", }
}

t.Skill_J623B <- 
{ //-------------------------------
	num = def_CN_Skill_J623B, name = "Cmd_Skill_J623B", command = [Def_CMD_623B], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J623B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J623B", }
}

t.Skill_J623A <- 
{ //-------------------------------
	num = def_CN_Skill_J623A, name = "Cmd_Skill_J623A", command = [Def_CMD_623A], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J623A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J623A", }
}

t.Skill_J214EX <- 
{ //-------------------------------
	num = def_CN_Skill_J214EX, name = "Cmd_Skill_J214EX", command = Def_CMD_214C, usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J214EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J214EX", }
}

t.Skill_J214C <- 
{ //-------------------------------
	num = def_CN_Skill_J214C, name = "Cmd_Skill_J214C", command = Def_CMD_214C, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J214C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J214C", }
}

t.Skill_J214BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J214B, name = "Cmd_Skill_J214B", command = [Def_CMD_214B,Def_CMD_214C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J214B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J214B", }
}

t.Skill_J214B <- 
{ //-------------------------------
	num = def_CN_Skill_J214B, name = "Cmd_Skill_J214B", command = Def_CMD_214B, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J214B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J214B", }
}

t.Skill_J214A <- 
{ //-------------------------------
	num = def_CN_Skill_J214A, name = "Cmd_Skill_J214A", command = Def_CMD_214A, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J214A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J214A", }
}
	
t.Skill_J421EX <- 
{ //-------------------------------
	num = def_CN_Skill_J421EX, name = "Cmd_Skill_J421EX", command = Def_CMD_421C, usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J421EX"}, PosState = "Air", Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", },
	UpdateTable = { name = "Mv_Skill_J421EX", }
}

t.Skill_J421C <- 
{ //-------------------------------
	num = def_CN_Skill_J421C, name = "Cmd_Skill_J421C", command = Def_CMD_421C, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J421C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J421C", }
}

t.Skill_J421BorC <- 
{ //-------------------------------
	num = def_CN_Skill_J421B, name = "Cmd_Skill_J421B", command = [Def_CMD_421B,Def_CMD_421C], posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J421B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J421B", }
}

t.Skill_J421B <- 
{ //-------------------------------
	num = def_CN_Skill_J421B, name = "Cmd_Skill_J421B", command = Def_CMD_421B, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J421B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J421B", }
}

t.Skill_J421A <- 
{ //-------------------------------
	num = def_CN_Skill_J421A, name = "Cmd_Skill_J421A", command = Def_CMD_421A, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J421A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J421A", }
}

t.Skill_J0202EX <- 
{ //-------------------------------
	num = def_CN_Skill_J0202EX, name = "Cmd_Skill_J0202EX", command = Def_CMD_22C, usegauge = 10000, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J0202EX"}, Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial", PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J0202EX", }
}

t.Skill_J0202C <- 
{ //-------------------------------
	num = def_CN_Skill_J0202C, name = "Cmd_Skill_J0202C", command = Def_CMD_22C,	posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J0202C"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J0202C", }
}

t.Skill_J0202BorC <- 
{ //-------------------------------
	num =def_CN_Skill_J0202B, name = "Cmd_Skill_J0202B", command = [Def_CMD_22B,Def_CMD_22C],	posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J0202B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J0202B", }
}

t.Skill_J0202B <- 
{ //-------------------------------
	num = def_CN_Skill_J0202B, name = "Cmd_Skill_J0202B", command = Def_CMD_22B,	posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J0202B"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J0202B", }
}

t.Skill_J0202A <- 
{ //-------------------------------
	num = def_CN_Skill_J0202A, name = "Cmd_Skill_J0202A", command = Def_CMD_22A, posstatus = _PosState_Air,
	flags = [ "airskill" ],
	CmdCheck = { MvCheck={ SkillFail="Mv_Skill_J0202A"}, PosState = "Air", },
	UpdateTable = { name = "Mv_Skill_J0202A", }
}


t.Atk_Std4A <- 
{ //-------------------------------
	num = def_CN_Atk4A, name = "Cmd_Atk_Std4A", command = "4+A",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK4A, },
	UpdateTable = { name = "Mv_Atk_Std4A", }
}

t.Atk_Std4B <- 
{ //-------------------------------
	num = def_CN_Atk4B, name = "Cmd_Atk_Std4B", command = "4+B",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK4B, },
	UpdateTable = { name = "Mv_Atk_Std4B", }
}

t.Atk_Std4C <- 
{ //-------------------------------
	num = def_CN_Atk4C, name = "Cmd_Atk_Std4C", command = "4+C",
	flags = [ "lastdelay" ], //1F増加
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK4C, },
	UpdateTable = { name = "Mv_Atk_Std4C", }
}

t.Atk_Std6A <- 
{ //-------------------------------
	num = def_CN_Atk6A, name = "Cmd_Atk_Std6A", command = "6+A",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK6A, },
	UpdateTable = { name = "Mv_Atk_Std6A", }
}

t.Atk_Std6B <- 
{ //-------------------------------
	num = def_CN_Atk6B, name = "Cmd_Atk_Std6B", command = "6+B",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK6B, },
	UpdateTable = { name = "Mv_Atk_Std6B", }
}

t.Atk_6B_6B <-
{ //-------------------------------
	num = def_CN_Atk_6B_6B, name = "Cmd_Atk_6B_6B", command = "6+B",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_Std6B"] }, },
	UpdateTable = { name = "Mv_Atk_6B_6B", }
}

t.Atk_Std6C <- 
{ //-------------------------------
	num = def_CN_Atk6C, name = "Cmd_Atk_Std6C", command = "6+C",
	flags = [ "lastdelay" ], //1F増加
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK6C, },
	UpdateTable = { name = "Mv_Atk_Std6C", }
}

t.Atk_6C_6C <-
{ //-------------------------------
	num = def_CN_Atk_6C_6C, name = "Cmd_Atk_6C_6C", command = "6+C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "AnySpecialCancelFlag", MvCheck = { Only = ["Mv_Atk_Std6C"] }, },
	UpdateTable = { name = "Mv_Atk_6C_6C", }
}

t.Atk_6C_6C_6C <-
{ //-------------------------------
	num = def_CN_Atk_6C_6C_6C, name = "Cmd_Atk_6C_6C_6C", command = "6+C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "AnySpecialCancelFlag", MvCheck = { Only = ["Mv_Atk_6C_6C"] }, },
	UpdateTable = { name = "Mv_Atk_6C_6C_6C", }
}

t.Atk_Air6A <- 
{ //-------------------------------
	num = def_CN_AtkJ6A, name = "Cmd_Atk_Air6A", command = "6+A", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ6A, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirA() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air6A", }
}

t.Atk_Air6B <- 
{ //-------------------------------
	num = def_CN_AtkJ6B, name = "Cmd_Atk_Air6B", command = "6+B", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ6B, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( BMvTbl.CheckCommand( [def_CN_Atk_DashStdB_Direct] ) )
		{
			if( pos.y + (vec.y*3) >= 0 ) return 0;
		}
		if( !Battle_Std.CheckEnableFlag_AssaultAirB() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air6B", }
}

t.Atk_Air6B_Air6B <-
{ //-------------------------------
	num = def_CN_Atk_J6B_J6B, name = "Cmd_Atk_Air6B_Air6B", command = "6+B", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( Battle_Std.CancelCheck_NormalAtk()==0 ) return 0;//TODO:これいるみたいだが変えたい
		
		return 1;
	},
	CmdCheck = 
	{
		SkillType = "AddCommand",
		MvCheck = { Only = ["Mv_Atk_Air6B"] },
		PosState = "Air",
		HitStatus = "Hit",
	},
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_J6B_J6B", }
}

t.Atk_Air6C <- 
{ //-------------------------------
	num = def_CN_AtkJ6C, name = "Cmd_Atk_Air6C", command = "6+C", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ6C, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( BMvTbl.CheckCommand( [def_CN_Atk_DashStdC_Direct] ) )
		{
			if( pos.y + (vec.y*3) >= 0 ) return 0;
		}
		if( !Battle_Std.CheckEnableFlag_AssaultAirC() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air6C", }
}

t.Atk_Air4A <- 
{ //-------------------------------
	num = def_CN_AtkJ4A, name = "Cmd_Atk_Air4A", command = "4+A", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ4A, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirA() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air4A", }
}

t.Atk_Air4B <- 
{ //-------------------------------
	num = def_CN_AtkJ4B, name = "Cmd_Atk_Air4B", command = "4+B", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ4B, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirB() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air4B", }
}

t.Atk_Air4C <- 
{ //-------------------------------
	num = def_CN_AtkJ4C, name = "Cmd_Atk_Air4C", command = "4+C", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ4C, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirC() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air4C", }
}




t.Atk_Std3B <- 
{ //-------------------------------
	num = def_CN_Atk3B, name = "Cmd_Atk_Std3B", command = "3+B",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal" , ComboLimit = DEF_BS_CL_ATK3B, },
	UpdateTable = { name = "Mv_Atk_Std3B", }
}

t.Atk_Cro3B <- 
{ //-------------------------------
	num = def_CN_Atk3B, name = "Cmd_Atk_Cro3B", command = "3+B",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},
	CmdCheck = { SkillType = "Normal" , ComboLimit = DEF_BS_CL_ATK3B, },
	UpdateTable = { name = "Mv_Atk_Cro3B", }
}


t.Atk_Std3C <- 
{ //-------------------------------
	num = def_CN_Atk3C, name = "Cmd_Atk_Std3C", command = "3+C",
	flags = [ "lastdelay" ], //1F増加
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK3C, },
	UpdateTable = { name = "Mv_Atk_Std3C", }
}

t.Atk_Cro3C <- 
{ //-------------------------------
	num = def_CN_Atk3C, name = "Cmd_Atk_Cro3C", command = "3+C",
	flags = [ "lastdelay" ], //1F増加
	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK3C, },
	UpdateTable = { name = "Mv_Atk_Cro3C", }
}

t.Atk_Cro1A <- 
{ //-------------------------------
	num = def_CN_Atk1A, name = "Cmd_Atk_Cro1A", command = "1+A",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK1A, },
	UpdateTable = { name = "Mv_Atk_Cro1A", }
}

t.Atk_Cro1C <- 
{ //-------------------------------
	num = def_CN_Atk1A, name = "Cmd_Atk_Cro1C", command = "1+C",
	flags = [ "lastdelay" ], //1F増加
	CmdBeforeStdFunc = function()
	{
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F ) return 0;
		return 1;
	},

	CmdCheck = { SkillType = "Normal", ComboLimit = DEF_BS_CL_ATK1C, },
	UpdateTable = { name = "Mv_Atk_Cro1C", }
}



t.Atk_Air2B <- 
{ //-------------------------------
	num = def_CN_AtkJ2B, name = "Cmd_Atk_Air2B", command = "v+B", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ2B, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirB() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air2B", }
}

t.Atk_Air2C <- 
{ //-------------------------------
	num = def_CN_AtkJ2C, name = "Cmd_Atk_Air2C", command = "v+C", posstatus = _PosState_Air,
	flags = [ "lastdelay","airskill" ], //1F増加
	CmdCheck = { SkillType = "Normal", PosState = "Air", ComboLimit = DEF_BS_CL_ATKJ2C, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		if( !Battle_Std.CheckEnableFlag_AssaultAirC() ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_Air2C", }
}


t.Throw_A <- 
{ //-------------------------------
	num = def_CN_Throw_A, name = "Cmd_Throw_A", command = ["A+D"],
	flags = [ "lastdelay","airskill" ],
	posstatus = _PosState_Air,
	CmdCheck = { SkillType = "SpecialDouji", PosState = "Air", },
	CmdAfterStdFunc = function()
	{
		//レバーが逆向き投げかどうか記憶する
		//自分→　←相手　４方向　・・・　逆投げ
		//←自分　←相手　６方向　・・・　逆投げ
		//…なので相手の方向を向いているかのチェックが必要
		Battle_Std.SetTechReverse( 0 );//レバー逆入れならdef_PP_TechReverseに記憶

		return 1;
	},	
	UpdateTable = { name = "Mv_Throw_A", }
}

//A+Bのキャラクター特殊行動
//A+B
if( Def_Rule_GameSystem == Def_RGS_UNI )
{
 
t.Atk_CroAandB <- 
{ //-------------------------------
	num = def_CN_AtkCAandB, name = "Cmd_Atk_CroAandB", command = "2+A+B",//200225:ダッシュやバクステを出そうとしても漏れる（3AB6など）
	flags = [ "lastdelay" ],
	function CmdBeforeStdFunc()
	{
		/*
		//コマンドチェックの処理が新しくなっているのでこのあたりのチェックは不要のはず
		//6+A+Bか4+A+Bでダッシュしようとした直後は出せない（先行入力用）
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_InputDoujiDash_F )
		{
			return 0;
		}
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_InputDoujiDash_B )
		{
			return 0;
		}
		//6+A+Bでダッシュした直後は出せない
		if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
		{
			return 0;
		}
		*/
		return 1;
	}
	CmdCheck = { SkillType = "SpecialDouji", ComboLimit = DEF_BS_CL_ATKCAANDB,
	MvCheck={ SkillFail="Mv_Atk_CroAandB"}, },
	UpdateTable = { name = "Mv_Atk_CroAandB", }
}

//ABダッシュがあるので基本的にUNIでは使えない
t.Atk_StdAandB <- 
{ //-------------------------------
	num = def_CN_AtkAandB, name = "Cmd_Atk_StdAandB", command = "A+B",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "SpecialDouji", ComboLimit = DEF_BS_CL_ATKAANDB,
	MvCheck={ SkillFail="Mv_Atk_StdAandB"}, },
	UpdateTable = { name = "Mv_Atk_StdAandB", }
}

if( Def_Sys_EnableDirectSSSkill )
{

// SSR
t.DirectSSSkill <-
{
	cmdtmplflags = Def_SCT_Common,
	num = def_CN_AtkAandB, name = "Cmd_DirectSSSkill", command = [ "A+B" ],
	CmdCheck = { SkillType = "DirectSS", HitStatus="Hit" },
	flags = [ "lastdelay" ], //1F増加
	UpdateTable = { name = "Mv_DirectSSSkill", },
}

// Def_Sys_EnableDirectSSSkill
}


t.Atk_AirAandB <- 
{ //-------------------------------
	num = def_CN_AtkJAandB, name = "Cmd_Atk_AirAandB", command = "A+B",
	flags = [ "lastdelay","airskill" ], posstatus = _PosState_Air,
	CmdCheck = { SkillType = "SpecialDouji", PosState="Air", ComboLimit = DEF_BS_CL_ATKJAANDB,
	MvCheck={ SkillFail="Mv_Atk_AirAandB"}, },
	UpdateTable = { name = "Mv_Atk_AirAandB", }
}

//B+Cのキャラクター特殊行動
//B+C 

t.Atk_CroBandC <- 
{ //-------------------------------
	num = def_CN_AtkCBandC, name = "Cmd_Atk_CroBandC", command = "v+B+C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "SpecialDouji", ComboLimit = DEF_BS_CL_ATKBANDC,
	MvCheck={ SkillFail="Mv_Atk_CroBandC"},	},	
	UpdateTable = { name = "Mv_Atk_CroBandC", }
}

t.Atk_StdBandC <- 
{ //-------------------------------
	num = def_CN_AtkBandC, name = "Cmd_Atk_StdBandC", command = "B+C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "SpecialDouji", ComboLimit = DEF_BS_CL_ATKBANDC,
	MvCheck={ SkillFail="Mv_Atk_StdBandC"}, },
	UpdateTable = { name = "Mv_Atk_StdBandC", }
}


t.Atk_AirBandC <- 
{ //-------------------------------
	num = def_CN_AtkJBandC, name = "Cmd_Atk_AirBandC", command = "B+C",
	flags = [ "lastdelay","airskill" ], posstatus = _PosState_Air,
	CmdCheck = { SkillType = "SpecialDouji", PosState="Air", ComboLimit = DEF_BS_CL_ATKJBANDC,
	MvCheck={ SkillFail="Mv_Atk_AirBandC"}, },
	UpdateTable = { name = "Mv_Atk_AirBandC", }
}



} // UNI



//通常技の追加攻撃
t.Atk_A_A <- 
{ //-------------------------------
	num = def_CN_Atk_A_A, name = "Cmd_Atk_A_A", command = "A",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_StdA"] }, },
	UpdateTable = { name = "Mv_Atk_A_A", }
}

t.Atk_B_B <- 
{ //-------------------------------
	num = def_CN_Atk_B_B, name = "Cmd_Atk_B_B", command = "B",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_StdB"] }, },
	// CmdCheck = { SkillType = "AddCommand", NormalCancelFlag = "Any", MvCheck = { Only = ["Mv_Atk_StdB"] }, },
	UpdateTable = { name = "Mv_Atk_B_B", }
}

t.Atk_B_B_B <-
{ //-------------------------------
	num = def_CN_Atk_B_B_B, name = "Cmd_Atk_B_B_B", command = "B",
	flags = [ "lastdelay" ],
	CmdCheck =
	{
		SkillType = "Normal",
		MvCheck = { Only = ["Mv_Atk_B_B"] },
	},
	UpdateTable = { name = "Mv_Atk_B_B_B", },
}





t.Atk_C_C <- 
{ //-------------------------------
	num = def_CN_Atk_C_C, name = "Cmd_Atk_C_C", command = "C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_StdC"] }, },
	UpdateTable = { name = "Mv_Atk_C_C", }
}


t.Atk_2B_2B <- 
{ //-------------------------------
	num = def_CN_Atk_2B_2B, name = "Cmd_Atk_2B_2B", command = ["1+B","2+B","3+B"],
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_CroB"] }, },
	UpdateTable = { name = "Mv_Atk_2B_2B", }
}

t.Atk_2B_2B_2B <- 
{ //-------------------------------
	num = def_CN_Atk_2B_2B_2B, name = "Cmd_Atk_2B_2B_2B", command = ["1+B","2+B","3+B"],
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_2B_2B"] }, },
	UpdateTable = { name = "Mv_Atk_2B_2B_2B", }
}

t.Atk_2C_2C <- 
{ //-------------------------------
	num = def_CN_Atk_2C_2C, name = "Cmd_Atk_2C_2C", command = ["1+C","2+C","3+C"],
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Atk_CroC"] }, },
	UpdateTable = { name = "Mv_Atk_2C_2C", }
}

t.Atk_JA_JA <- 
{ //-------------------------------
	num = def_CN_Atk_JA_JA, name = "Cmd_Atk_JA_JA", command = ["A"], posstatus = _PosState_Air,
	flags = [ "lastdelay" ],
	CmdBeforeStdFunc = function()
	{
		local airatk_st = BMvTbl.GetPP(def_PP_AirAtkStatus); //ジャンプ攻撃のステータス取得
		if( (airatk_st&def_PP_AAS_Shielded) ) return 0; //シールドされた攻撃からは出せない
		local inAirAssult = (airatk_st&def_PP_AAS_inAirAssault); //空中アサルトから出したかどうか
		if( !inAirAssult && (airatk_st&def_PP_AAS_inAssault) ) return 0; //アサルトＪＡからは出せない(空中アサルトは除外)		
		return 1;
	},

	CmdCheck = { SkillType = "Normal", PosState="Air", MvCheck = { Only = ["Mv_Atk_AirA"] }, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_JA_JA", }
}

t.Atk_JB_JB <- 
{ //-------------------------------
	num = def_CN_Atk_JB_JB, name = "Cmd_Atk_JB_JB", command = ["B"], posstatus = _PosState_Air,
	flags = [ "lastdelay" ],
	CmdBeforeStdFunc = function()
	{
		local airatk_st = BMvTbl.GetPP(def_PP_AirAtkStatus); //ジャンプ攻撃のステータス取得
		if( (airatk_st&def_PP_AAS_Shielded) ) return 0; //シールドされた攻撃からは出せない
		local inAirAssult = (airatk_st&def_PP_AAS_inAirAssault); //空中アサルトから出したかどうか
		if( !inAirAssult && (airatk_st&def_PP_AAS_inAssault) ) return 0; //アサルトＪＢからは出せない(空中アサルトは除外)		
		return 1;
	},

	CmdCheck = { SkillType = "Normal", PosState="Air", MvCheck = { Only = ["Mv_Atk_AirB"] }, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_JB_JB", }
}

t.Atk_JC_JC <- 
{ //-------------------------------
	num = def_CN_Atk_JC_JC, name = "Cmd_Atk_JC_JC", command = ["C"], posstatus = _PosState_Air,
	flags = [ "lastdelay" ],
	CmdBeforeStdFunc = function()
	{
		local airatk_st = BMvTbl.GetPP(def_PP_AirAtkStatus); //ジャンプ攻撃のステータス取得
		if( (airatk_st&def_PP_AAS_Shielded) ) return 0; //シールドされた攻撃からは出せない
		local inAirAssult = (airatk_st&def_PP_AAS_inAirAssault); //空中アサルトから出したかどうか
		if( !inAirAssult && (airatk_st&def_PP_AAS_inAssault) ) return 0; //アサルトＪＣからは出せない(空中アサルトは除外)
		return 1;
	},

	CmdCheck = { SkillType = "Normal", PosState="Air", MvCheck = { Only = ["Mv_Atk_AirC"] }, },
	CmdAfterStdFunc = function()
	{
		local pos = BMvTbl.GetPosition();
		local vec = BMvTbl.GetVector(0);
		if( pos.y + vec.y >= 0 ) return 0;
		return 1;
	},
	UpdateTable = { name = "Mv_Atk_JC_JC", }
}




t.Skill_236A_236EX <- 
{ //-------------------------------
	num = def_CN_Skill_236A_236EX, name = "Cmd_Skill_236A_236EX", command = Def_CMD_236C, usegauge = 10000,
	CmdCheck = { Cost = { ComboGauge = 10000 }, SkillType = "Normal", MvCheck = { Only = ["Mv_Skill_236A"] }, },
	UpdateTable = { name = "Mv_Skill_236A_236EX", }
}

t.Skill_236A_236C <- 
{ //-------------------------------
	num = def_CN_Skill_236A_236C, name = "Cmd_Skill_236A_236C", command = Def_CMD_236C,	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236A"] }, },
	UpdateTable = { name = "Mv_Skill_236A_236C", }
}

t.Skill_236A_236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_236A_236BorC, name = "Cmd_Skill_236A_236B", command = [Def_CMD_236B,Def_CMD_236C],	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236A"] }, },
	UpdateTable = { name = "Mv_Skill_236A_236B", }
}

t.Skill_236A_236B <- 
{ //-------------------------------
	num = def_CN_Skill_236A_236B, name = "Cmd_Skill_236A_236B", command = Def_CMD_236B,	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236A"] }, },
	UpdateTable = { name = "Mv_Skill_236A_236B", }
}

t.Skill_236A_236A <- 
{ //-------------------------------
	num = def_CN_Skill_236A_236A, name = "Cmd_Skill_236A_236A", command = Def_CMD_236A,
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236A"] }, },
	UpdateTable = { name = "Mv_Skill_236A_236A", }
}


t.Skill_236B_236EX <- 
{ //-------------------------------
	num = def_CN_Skill_236B_236EX, name = "Cmd_Skill_236B_236EX", command = Def_CMD_236C, usegauge = 10000,
	CmdCheck = { SkillType = "Normal", MvCheck = { Only = ["Mv_Skill_236B"] }, },
	UpdateTable = { name = "Mv_Skill_236B_236EX", }
}

t.Skill_236B_236C <- 
{ //-------------------------------
	num = def_CN_Skill_236B_236C, name = "Cmd_Skill_236B_236C", command = Def_CMD_236C,	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236B"] }, },
	UpdateTable = { name = "Mv_Skill_236B_236C", }
}

t.Skill_236B_236BorC <- 
{ //-------------------------------
	num = def_CN_Skill_236B_236BorC, name = "Cmd_Skill_236B_236B", command = [Def_CMD_236B,Def_CMD_236C],	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236B"] }, },
	UpdateTable = { name = "Mv_Skill_236B_236B", }
}

t.Skill_236B_236B <- 
{ //-------------------------------
	num = def_CN_Skill_236B_236B, name = "Cmd_Skill_236B_236B", command = Def_CMD_236B,	
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236B"] }, },
	UpdateTable = { name = "Mv_Skill_236B_236B", }
}

t.Skill_236B_236A <- 
{ //-------------------------------
	num = def_CN_Skill_236B_236A, name = "Cmd_Skill_236B_236A", command = Def_CMD_236A,
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236B"] }, },
	UpdateTable = { name = "Mv_Skill_236B_236A", }
}


t.Skill_236_236 <- 
{ //-------------------------------
	num = def_CN_Skill_236_236, name = "Cmd_Skill_236_236", command = [Def_CMD_236A,Def_CMD_236B,Def_CMD_236C],
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236A","Mv_Skill_236B","Mv_Skill_236C"] }, },
	UpdateTable = { name = "Mv_Skill_236_236", }
}

t.Skill_236_236_236 <- 
{ //-------------------------------
	num = def_CN_Skill_236_236_236, name = "Cmd_Skill_236_236_236", command = [Def_CMD_236A,Def_CMD_236B,Def_CMD_236C],
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236_236"] }, },
	UpdateTable = { name = "Mv_Skill_236_236_236", }
}

t.Skill_236_236_214 <- 
{ //-------------------------------
	num = def_CN_Skill_236_236_214, name = "Cmd_Skill_236_236_214", command = [Def_CMD_214A,Def_CMD_214B,Def_CMD_214C],
	CmdCheck = { MvCheck = { Only = ["Mv_Skill_236_236"] }, },
	UpdateTable = { name = "Mv_Skill_236_236_214", }
}

//定義ミスのチェック用
if(0)
{
	_dpn("CMDエラーチェック");
	
	foreach( slot, val in t )
	{
		local error = [];
		local auto_name = "Cmd_" + slot;
		if( "name" in val )
		{
			if( val.name != auto_name )
			{
				error.append("nameがおかしい:"+val.name+" -> "+auto_name);
			}
		}
		else
		{
			error.append("nameがない");
		}
		
		local update_name = "";
		if( "UpdateTable" in val && "name" in val.UpdateTable )
		{
			update_name = val.UpdateTable.name;
		}
		
		local find_lastdelay = 0;
		if( "flags" in val && typeof val.flags == "array")
		{
			for( local i=0; i<val.flags.len(); i++ )
			{
				if( val.flags[i] == "lastdelay" )
				{
					find_lastdelay = 1;
				}
				// _dpn(":"+val.flags[i]);
			}
		}
		/*
		if( find_lastdelay )
		{
			error.append("lastdelayがある");
		}
		*/
		
		//SkillFailの指定チェック
		if( "CmdCheck" in val )
		{
			local CmdCheck = val.CmdCheck;
			
			if( "MvCheck" in CmdCheck )
			{
				local MvCheck = CmdCheck.MvCheck;
				
				
				if( "SkillFail" in MvCheck )
				{
					if( MvCheck.SkillFail != update_name )
					{
						error.append("SkillFail指定がおかしい");
					}
				}
				else
				{
					//SkillFailがない
					if( "SkillType" in CmdCheck )
					{
						if( CmdCheck.SkillType.find("Special")==0 )
						{
							error.append("SkillFail指定ないの？");
						}
					}
					
				}
			}
			
		}
		
		if( error.len() > 0 )
		{
			_dpn(slot+" : ");
			foreach( i, v in error )
			{
				_dp( v );
			}
		}
	}
	
}

//定義したテーブルを返す
return t;

}
//