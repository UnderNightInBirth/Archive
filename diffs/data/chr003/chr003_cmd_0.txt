//コマンドテーブル skillは格ゲーコマンド表記
btl_debPrint2("\n[CAR_CommandTable]");

local t =
{
	Skill_41236SP_ABC = {},
	Skill_41236SP = {},

	Skill_63214EX = {},
	Skill_236EX =		{ CmdCheck = { BallLimit = { [1] = 1 } } },
	Skill_236BorC =		{ CmdCheck = { BallLimit = { [1] = 1 } } },
	Skill_236A = 		{ CmdCheck = { BallLimit = { [1] = 1 } } },

	Skill_623EX = {},
	Skill_623BorC = {},
	Skill_623A = {},
	
	Skill_214EX = {},
	Skill_214BorC = {},
	Skill_214A = {},

	Skill_0202EX = {},
	Skill_0202BorC = {},
	Skill_0202A = {},	
	
	Skill_J236EX =		{ CmdCheck = { BallLimit = { [1] = 1 } } },
	Skill_J236BorC =	{ CmdCheck = { BallLimit = { [1] = 1 } } },
	Skill_J236A =		{ CmdCheck = { BallLimit = { [1] = 1 } } },

	Atk_Cro3C = {},
	Atk_Std6C = {},

	Atk_Std6B = {},
	Atk_Std3B = {},

	Atk_Air6B = {},
	
	Atk_6B_6B =
	{
		commandcheckmuki = 1, // コマンドチェックの向き設定、 0-自動(基本値) 1-向いている方向 2-振り向き予定の方向
		function CmdBeforeFunc()
		{
			//これがないと着地後6+A+Bのダッシュをやろうとして派生が暴発しやすい
			if ( BMvTbl.CheckCommand( [def_CN_Dash_F_Douji, def_CN_Atk_DashStdB_Direct] ) ) return 0;
			
			return 1;
		}
		CmdCheck =
		{
			SkillType = "AddCommand",
			MvCheck = { Only = ["Mv_Atk_Std6B","Mv_Atk_Air6B_Land"] },
			HitStatus = "Hit",
			ParamFlagCheck = { Only = { [2]=4 } },
		}
	},
	
	Atk_Air6B_Air6B =
	{
		CmdCheck = 
		{
			SkillType = "AddCommand",
			MvCheck = { Only = ["Mv_Atk_Air6B"] },
			ParamFlagCheck = { Only = { [2]=4 } },
		},
	}

	Atk_B_B =
	{
		CmdCheck =
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Atk_StdB"] },
			FrameIDCheck = { Only = 10 },
		}	
	},
	Atk_JB_JB = {},
	
	Atk_StdBandC = {
		function CmdAfterFunc()
		{
			// 181017 PPに入れる値を0or1からレバー方向の値を入れるように変更
			local stick = Battle_Std.GetStickHold_FurimukiReverse();//地上技で振り向く予定があるのでこの関数
			BMvTbl.SetPP( def_PP_Car_BandC_Type, stick );
			return 1;
		},
	},	
	
	Atk_AirBandC = {
		function CmdBeforeFunc()
		{
			if( BMvTbl.AddAirCount( 0, 0 ) ) return 0;
			return 1;
		}
		function CmdAfterFunc()
		{
			// 181017 PPに入れる値を0or1からレバー方向の値を入れるように変更
			local stick = BMvTbl.GetStickHold();//こっちは空中なのでこのままでOK
			BMvTbl.SetPP( def_PP_Car_BandC_Type, stick );
			return 1;
		},	
	},	
	
	Atk_DashStdBandC = {},
	Atk_Air2C = { command="3+C" }, // 3B拾いや2C拾いと重複しないコマンドに変更
	Atk_B_B_B = { CmdCheck = { SkillType = "AnyNormalCancelFlag" } },
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_Std6C",
		ResetTmplName="Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_Std6C",
		UpdateMoveName="Mv_Atk_Std6B",
		ResetTmplName="Atk_Std6C",
	},
	{
		CheckMoveName="Mv_Atk_Std6B",
		UpdateMoveName="Mv_Atk_6B_6B",
		ResetTmplName="Atk_Std6B",
		SrcCmdTmpl="Atk_6B_6B",
		
	},
	{
		CheckMoveName="Mv_Atk_6B_6B",
		UpdateMoveName="Mv_Skill_SSRelayAtk",
		ResetTmplName="Atk_6B_6B",
		CmdCheck = 
		{
			SkillType = "AddCommand",
			FrameIDCheck = { Only=[500], },
		}
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_SSRelayAtk",
		ResetTmplName="Skill_SSRelayAtk",
		UpdateMoveName="Mv_Skill_41236SP",
		CmdCheck = 
		{
			SkillType = "SpSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = "OverLiberate" },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar );

CHR003_CommandTable <- Battle_Std.MakeCommandTable( { command=t } );